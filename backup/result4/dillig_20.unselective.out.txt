[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> conjunctive]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target dillig_20
[  8%] Building CXX object CMakeFiles/dillig_20.dir/test/dillig_20.cpp.o
[ 16%] Building CXX object CMakeFiles/dillig_20.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/dillig_20.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/dillig_20.dir/src/color.cpp.o
[ 41%] Building CXX object CMakeFiles/dillig_20.dir/src/state.cpp.o
[ 50%] Building CXX object CMakeFiles/dillig_20.dir/src/polynomial.cpp.o
[ 58%] Building CXX object CMakeFiles/dillig_20.dir/src/iif.cpp.o
[ 66%] Building CXX object CMakeFiles/dillig_20.dir/src/config.cpp.o
[ 75%] Building CXX object CMakeFiles/dillig_20.dir/src/classifier.cpp.o
[ 83%] Building CXX object CMakeFiles/dillig_20.dir/src/poly_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/dillig_20.dir/src/conjunctive_learner.cpp.o
[100%] Building CXX object CMakeFiles/dillig_20.dir/src/instrumentation.cpp.o
Linking CXX executable dillig_20
[100%] Built target dillig_20
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[1] :::::: 0	0	0	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt[0m
[34m[1mTest Counter Example: (0,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [1+:93-]|-->> [33m(1 - 0.006948023440035121*x - 0.004619290309034339*y + 0.002595964801771364*k >= 0)  &&  (1 - 0.02529557327467693*x - 0.02144624690679131*k >= 0)  &&  (1 - 0.009187775154724685*x + 0.005742359471702928*y + 0.01173993491992599*k >= 0)  &&  (1 + 0.0748829953198128*x - 0.0031201248049922*y + 0.0249609984399376*k >= 0)  &&  (1 - 0.0005370157268891446*x - 0.01235136171845033*y - 0.0007671653241273494*k >= 0)  &&  (1 + 0.002158661629789531*x + 0.02752293577981652*y + 0.01780895844576363*k >= 0)  &&  (1 + 0.005477940452028612*x + 0.002837494334863741*y - 0.006384362253443418*k >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [1+:215-]|-->> [33m(1 - 0.0144*x - 0.01792*y + 0.01056*k >= 0)  &&  (1 - 0.02529557327467693*x - 0.02144624690679131*k >= 0)  &&  (1 - 0.009187775154724685*x + 0.005742359471702928*y + 0.01173993491992599*k >= 0)  &&  (1 + 0.0748829953198128*x - 0.0031201248049922*y + 0.0249609984399376*k >= 0)  &&  (1 - 0.0005370157268891446*x - 0.01235136171845033*y - 0.0007671653241273494*k >= 0)  &&  (1 + 0.002158661629789531*x + 0.02752293577981652*y + 0.01780895844576363*k >= 0)  &&  (1 + 0.005477940452028612*x + 0.002837494334863741*y - 0.006384362253443418*k >= 0) 
[0m[31m[3Pure Random][0m[#r90,#s0] -->   [1+:325-]|-->> [33m(1 - 0.0144*x - 0.01792*y + 0.01056*k >= 0)  &&  (1 - 0.02529557327467693*x - 0.02144624690679131*k >= 0)  &&  (1 - 0.009187775154724685*x + 0.005742359471702928*y + 0.01173993491992599*k >= 0)  &&  (1 + 0.0748829953198128*x - 0.0031201248049922*y + 0.0249609984399376*k >= 0)  &&  (1 - 0.0005370157268891446*x - 0.01235136171845033*y - 0.0007671653241273494*k >= 0)  &&  (1 + 0.002158661629789531*x + 0.02752293577981652*y + 0.01780895844576363*k >= 0)  &&  (1 + 0.005477940452028612*x + 0.002837494334863741*y - 0.006384362253443418*k >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 3 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1515 - 22*x - 27*y + 16*k >= 0)  &&  (513 - 13*x - 11*k >= 0)  &&  (505 + 14*y + 9*k >= 0)  &&  (40 + 3*x + k >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.inv >>> [0m(1515 - 22*x - 27*y + 16*k >= 0)  &&  (513 - 13*x - 11*k >= 0)  &&  (505 + 14*y + 9*k >= 0)  &&  (40 + 3*x + k >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 2 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt[0m
[34m[1mTest Counter Example: (0,138,138) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-11,144,133) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (253,0,253) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-13,145,132) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-2,139,137) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-15,146,131) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (242,6,248) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-18,148,130) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [29+:436-]|-->> [33m(1 - 0.042542504748624*x - 0.04254623807834146*y + 0.04254246931987787*k >= 0)  &&  (1 - 0.2973706938745715*x - 0.02997510338047428*y + 0.2994884337057218*k >= 0)  &&  (1 + 0.006957529655215023*x - 0.002985998414891881*y + 0.004515771964139098*k >= 0)  &&  (11.56713989131886 - 0.01405400781508787*x - 0.04803040099264436*y - 0.02771334353399857*k >= 0)  &&  (1 + 0.09996670121921222*x + 0.09996261265633311*y - 0.09996915752135593*k >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [29+:545-]|-->> [33m(24.57266848758371 - 0.003404419577823517*x - 0.07919053982461022*y - 0.08976818313989887*k >= 0)  &&  (1 - 0.2973706938745715*x - 0.02997510338047428*y + 0.2994884337057218*k >= 0)  &&  (1 + 0.006957529655215023*x - 0.002985998414891881*y + 0.004515771964139098*k >= 0)  &&  (1 - 0.1052210323501542*x - 0.1052244930671622*y + 0.105217739009412*k >= 0)  &&  (1 + 0.09996670121921222*x + 0.09996261265633311*y - 0.09996915752135593*k >= 0) 
[0m[31m[3Pure Random][0m[#r90,#s0] -->   [29+:647-]|-->> [33m(24.57266848758371 - 0.003404419577823517*x - 0.07919053982461022*y - 0.08976818313989887*k >= 0)  &&  (1 - 0.2973706938745715*x - 0.02997510338047428*y + 0.2994884337057218*k >= 0)  &&  (1 + 0.006957529655215023*x - 0.002985998414891881*y + 0.004515771964139098*k >= 0)  &&  (1 - 0.1052210323501542*x - 0.1052244930671622*y + 0.105217739009412*k >= 0)  &&  (1 + 0.09996670121921222*x + 0.09996261265633311*y - 0.09996915752135593*k >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 3 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(19 - 2*x - 2*y + 2*k >= 0)  &&  (67 - 20*x - 2*y + 20*k >= 0)  &&  (10 + x + y - k >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.inv >>> [0m(19 - 2*x - 2*y + 2*k >= 0)  &&  (67 - 20*x - 2*y + 20*k >= 0)  &&  (10 + x + y - k >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 3 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt[0m
[34m[1mTest Counter Example: (0,-4,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-1,-5,-6) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-2,-6,-8) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-3,-7,-10) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-4,-8,-12) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-5,-9,-14) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-6,-10,-16) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-7,-11,-18) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [64+:766-]|-->> [33m(24.57277120552254 - 0.003404455654230101*x - 0.07919084491547912*y - 0.08976855306325016*k >= 0)  &&  (0.9990576951090588 - 0.2856003347597387*x - 0.2856023077556328*y + 0.2856040436881964*k >= 0)  &&  (1.368693533651406 + 0.01441478022535784*x + 0.001421175515176125*y + 0.01400873007816465*k >= 0)  &&  (1.844378525632806 - 0.01457418385593395*x + 0.059837945233687*y + 0.01182495750236273*k >= 0)  &&  (0.9996858695709534 + 0.09996521975650483*x + 0.09995984060439089*y - 0.09996397813425562*k >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [64+:879-]|-->> [33m(24.57277120552254 - 0.003404455654230101*x - 0.07919084491547912*y - 0.08976855306325016*k >= 0)  &&  (0.9990576951090588 - 0.2856003347597387*x - 0.2856023077556328*y + 0.2856040436881964*k >= 0)  &&  (1.368693533651406 + 0.01441478022535784*x + 0.001421175515176125*y + 0.01400873007816465*k >= 0)  &&  (1.844378525632806 - 0.01457418385593395*x + 0.059837945233687*y + 0.01182495750236273*k >= 0)  &&  (0.9996858695709534 + 0.09996521975650483*x + 0.09995984060439089*y - 0.09996397813425562*k >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(10 + x + y - k >= 0)  &&  (7 - 2*x - 2*y + 2*k >= 0)  &&  (2540 + 27*x + 26*k >= 0)  &&  (31 + y >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.inv >>> [0m(10 + x + y - k >= 0)  &&  (7 - 2*x - 2*y + 2*k >= 0)  &&  (2540 + 27*x + 26*k >= 0)  &&  (31 + y >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 4 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt[0m
[34m[1mTest Counter Example: (-48,0,-48) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-49,-1,-50) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-50,-2,-52) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-51,-3,-54) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-52,-4,-56) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-53,-5,-58) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-54,-6,-60) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[34m[1mTest Counter Example: (-55,-7,-62) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [102+:996-]|-->> [33m(0.9991994527072166 + 0.3999080378020032*x + 0.3999083625513631*y - 0.3999048735834539*k >= 0)  &&  (0.9991905081469667 - 0.2856164094818627*x - 0.2856177883412535*y + 0.285619598154331*k >= 0)  &&  (24.57279451187293 - 0.00340446383984376*x - 0.07919091413955814*y - 0.08976863699759852*k >= 0)  &&  (1.844396102836697 - 0.01457411080619697*x + 0.05983744869535246*y + 0.01182481047483896*k >= 0)  &&  (5.555466879489227 + 0.03511572226656026*x + 0.01915403032721469*y + 0.03990422984836393*k >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [102+:1100-]|-->> [33m(0.9991994527072166 + 0.3999080378020032*x + 0.3999083625513631*y - 0.3999048735834539*k >= 0)  &&  (0.9991905081469667 - 0.2856164094818627*x - 0.2856177883412535*y + 0.285619598154331*k >= 0)  &&  (24.57279451187293 - 0.00340446383984376*x - 0.07919091413955814*y - 0.08976863699759852*k >= 0)  &&  (1.844396102836697 - 0.01457411080619697*x + 0.05983744869535246*y + 0.01182481047483896*k >= 0)  &&  (5.555466879489227 + 0.03511572226656026*x + 0.01915403032721469*y + 0.03990422984836393*k >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(5 + 2*x + 2*y - 2*k >= 0)  &&  (7 - 2*x - 2*y + 2*k >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.inv >>> [0m(5 + 2*x + 2*y - 2*k >= 0)  &&  (7 - 2*x - 2*y + 2*k >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 5 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt[0m
[34m[1mTest Counter Example: (0,0,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,-1,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-2,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,-4,-6) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,-9,-7) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-10,1,-8) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,-10,-9) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-11,-11,-20) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [102+:1266-]|-->> [33m(0.9991902578331064 - 1.999177063938806*x - 1.999178441178453*y + 1.99918025361346*k >= 0)  &&  (0.9991876050260089 + 1.999190786390486*x + 1.999187033274899*y - 1.999187605011983*k >= 0)  &&  (24.57279451187293 - 0.00340446383984376*x - 0.07919091413955814*y - 0.08976863699759852*k >= 0)  &&  (1.844396102836697 - 0.01457411080619697*x + 0.05983744869535246*y + 0.01182481047483896*k >= 0)  &&  (5.555466879489227 + 0.03511572226656026*x + 0.01915403032721469*y + 0.03990422984836393*k >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [102+:1392-]|-->> [33m(0.9991902578331064 - 1.999177063938806*x - 1.999178441178453*y + 1.99918025361346*k >= 0)  &&  (0.9991876050260089 + 1.999190786390486*x + 1.999187033274899*y - 1.999187605011983*k >= 0)  &&  (24.57279451187293 - 0.00340446383984376*x - 0.07919091413955814*y - 0.08976863699759852*k >= 0)  &&  (1.844396102836697 - 0.01457411080619697*x + 0.05983744869535246*y + 0.01182481047483896*k >= 0)  &&  (5.555466879489227 + 0.03511572226656026*x + 0.01915403032721469*y + 0.03990422984836393*k >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 - 2*x - 2*y + 2*k >= 0)  &&  (1 + 2*x + 2*y - 2*k >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_20.inv >>> [0m(1 - 2*x - 2*y + 2*k >= 0)  &&  (1 + 2*x + 2*y - 2*k >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[1m[32m-----------------------------------------------------------finish proving---------------------------------------------------------------[0m
[32mThe invariant can be [33m(1 - 2*x - 2*y + 2*k >= 0)  &&  (1 + 2*x + 2*y - 2*k >= 0) [0m

=====================time=========================
