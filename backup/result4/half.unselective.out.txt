[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> conjunctive]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target half
[  8%] Building CXX object CMakeFiles/half.dir/test/half.cpp.o
[ 16%] Building CXX object CMakeFiles/half.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/half.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/half.dir/src/color.cpp.o
[ 41%] Building CXX object CMakeFiles/half.dir/src/state.cpp.o
[ 50%] Building CXX object CMakeFiles/half.dir/src/polynomial.cpp.o
[ 58%] Building CXX object CMakeFiles/half.dir/src/iif.cpp.o
[ 66%] Building CXX object CMakeFiles/half.dir/src/config.cpp.o
[ 75%] Building CXX object CMakeFiles/half.dir/src/classifier.cpp.o
[ 83%] Building CXX object CMakeFiles/half.dir/src/poly_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/half.dir/src/conjunctive_learner.cpp.o
[100%] Building CXX object CMakeFiles/half.dir/src/instrumentation.cpp.o
Linking CXX executable half
[100%] Built target half
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[0][0m
[33m  2)---->[1] :::::: 0	0	0	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[34m[1mTest Counter Example: (0,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [1+:481-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325444*n >= 0)  &&  (1 - 0.009785322016974537*i + 0.01008487269096355*k - 0.001497753369945082*n >= 0)  &&  (1 + 0.003776384112212556*i + 0.008361993391327803*k - 0.01362195697619529*n >= 0)  &&  (1 - 0.0002640147848279504*i + 0.006072340051042858*k + 0.01179266038898178*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [1+:1285-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325444*n >= 0)  &&  (1 - 0.009785322016974537*i + 0.01008487269096355*k - 0.001497753369945082*n >= 0)  &&  (1 + 0.003776384112212556*i + 0.008361993391327803*k - 0.01362195697619529*n >= 0)  &&  (1 - 0.0002640147848279504*i + 0.006072340051042858*k + 0.01179266038898178*n >= 0)  &&  (1 - 0.00761783843834312*i + 0.02094905570544358*k - 0.01174416759244564*n >= 0)  &&  (1 + 0.01085657048693011*i - 0.002003295744612104*k + 0.002714142621732528*n >= 0)  &&  (1 + 0.01899907321594069*i + 0.002780352177942539*k + 0.009731232622798888*n >= 0) 
[0m[31m[3Pure Random][0m[#r90,#s0] -->   [1+:2122-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325444*n >= 0)  &&  (1 - 0.009785322016974537*i + 0.01008487269096355*k - 0.001497753369945082*n >= 0)  &&  (1 + 0.003776384112212556*i + 0.008361993391327803*k - 0.01362195697619529*n >= 0)  &&  (1 - 0.0002640147848279504*i + 0.006072340051042858*k + 0.01179266038898178*n >= 0)  &&  (1 - 0.00761783843834312*i + 0.02094905570544358*k - 0.01174416759244564*n >= 0)  &&  (1 + 0.01085657048693011*i - 0.002003295744612104*k + 0.002714142621732528*n >= 0)  &&  (1 + 0.01899907321594069*i + 0.002780352177942539*k + 0.009731232622798888*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 3 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(53 + i >= 0)  &&  (426 + 9*k - 5*n >= 0)  &&  (73 - n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/half.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/half.inv >>> [0m(53 + i >= 0)  &&  (426 + 9*k - 5*n >= 0)  &&  (73 - n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty II (invariant && loopcondition =S=> invariant) FAILS.
[0m
[32m[1m--------------------------------------------- Iteration 2 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[34m[1mTest Counter Example: (0,74,74) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,75,75) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,76,76) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,77,77) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,78,78) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,79,79) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,80,80) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,81,81) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [321+:3009-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325444*n >= 0)  &&  (1 - 0.007603395283822584*i + 0.01263357693663798*k + 0.001472209265532143*n >= 0)  &&  (1 + 0.005649739677513318*i + 0.01130167461729149*k - 0.01129081870872144*n >= 0)  &&  (2.219764705882353 + 0.016*i - 0.00564705882352941*k - 0.00941176470588235*n >= 0)  &&  (3.474351585014409 + 0.01786743515850144*i - 0.001729106628242078*k - 0.02881844380403459*n >= 0)  &&  (3.468456911703669 + 0.003811854650008765*i + 0.007617022462560699*k - 0.03809179915026031*n >= 0)  &&  (1 + 0.0118206938900829*i - 0.00184218606079214*k + 0.003223825606386245*n >= 0)  &&  (1 + 0.01974386339381003*i + 0.004268943436499466*k + 0.0112059765208111*n >= 0)  &&  (1 - 0.004134256956206249*i + 0.0280151470287665*k - 0.009619210460214465*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [321+:3514-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325444*n >= 0)  &&  (1 - 0.007603395283822584*i + 0.01263357693663798*k + 0.001472209265532143*n >= 0)  &&  (1 + 0.005649739677513318*i + 0.01130167461729149*k - 0.01129081870872144*n >= 0)  &&  (2.219764705882353 + 0.016*i - 0.00564705882352941*k - 0.00941176470588235*n >= 0)  &&  (3.474351585014409 + 0.01786743515850144*i - 0.001729106628242078*k - 0.02881844380403459*n >= 0)  &&  (3.468456911703669 + 0.003811854650008765*i + 0.007617022462560699*k - 0.03809179915026031*n >= 0)  &&  (1 + 0.0118206938900829*i - 0.00184218606079214*k + 0.003223825606386245*n >= 0)  &&  (1 + 0.01974386339381003*i + 0.004268943436499466*k + 0.0112059765208111*n >= 0)  &&  (1 - 0.004134256956206249*i + 0.0280151470287665*k - 0.009619210460214465*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(36 + k >= 0)  &&  (357 + 7*i + 4*n >= 0)  &&  (91 - n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/half.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/half.inv >>> [0m(36 + k >= 0)  &&  (357 + 7*i + 4*n >= 0)  &&  (91 - n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty III (invariant && ~loopcondition ==> postcondition) FAILS.
[0m
[32m[1m--------------------------------------------- Iteration 3 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[34m[1mTest Counter Example: (0,92,92) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,93,93) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,94,94) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,95,95) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,96,96) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,97,97) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,98,98) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,99,99) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [713+:4095-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325445*n >= 0)  &&  (1 - 0.007603373563894297*i + 0.01263354084744693*k + 0.001472205060005735*n >= 0)  &&  (1 + 0.1052376801556932*i + 0.2104575586797544*k - 0.2104641270107486*n >= 0)  &&  (2.038007863695937 + 0.02025497438341475*i - 0.002859525795305611*k - 0.007625402120814966*n >= 0)  &&  (2.560898699251084 + 0.02916830902640912*i + 0.009459992116673227*k - 0.02522664564446195*n >= 0)  &&  (1.851035520503025 + 0.01379937380101318*i + 0.02759848669722179*k - 0.03619480508614126*n >= 0)  &&  (1 + 0.2019557483327325*i + 0.1413639994903457*k - 0.1413740481754795*n >= 0)  &&  (1 + 0.01980982567353407*i + 0.01109350237717908*k + 0.01664025356576862*n >= 0)  &&  (7.027322404371589 - 0.03825136612021851*i + 0.07650273224043719*k - 0.06010928961748629*n >= 0)  &&  (1 + 0.03324097450840895*i - 0.005540171353214531*k + 0.005540153482921785*n >= 0)  &&  (1 + 0.06793931140095173*i - 0.005860260092066111*k + 0.005853414287408321*n >= 0)  &&  (1 + 0.1498073841726405*i + 0.01728052386604639*k - 0.01729041094302453*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [713+:5205-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325445*n >= 0)  &&  (1 - 0.007603373563894297*i + 0.01263354084744693*k + 0.001472205060005735*n >= 0)  &&  (1 + 0.1052376801556932*i + 0.2104575586797544*k - 0.2104641270107486*n >= 0)  &&  (2.038007863695937 + 0.02025497438341475*i - 0.002859525795305611*k - 0.007625402120814966*n >= 0)  &&  (2.560898699251084 + 0.02916830902640912*i + 0.009459992116673227*k - 0.02522664564446195*n >= 0)  &&  (1.851035520503025 + 0.01379937380101318*i + 0.02759848669722179*k - 0.03619480508614126*n >= 0)  &&  (1 + 0.2019557483327325*i + 0.1413639994903457*k - 0.1413740481754795*n >= 0)  &&  (1 + 0.01980982567353407*i + 0.01109350237717908*k + 0.01664025356576862*n >= 0)  &&  (7.027322404371589 - 0.03825136612021851*i + 0.07650273224043719*k - 0.06010928961748629*n >= 0)  &&  (1 + 0.03324097450840895*i - 0.005540171353214531*k + 0.005540153482921785*n >= 0)  &&  (1 + 0.06793931140095173*i - 0.005860260092066111*k + 0.005853414287408321*n >= 0)  &&  (1 + 0.1498073841726405*i + 0.01728052386604639*k - 0.01729041094302453*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(19 + 2*i + 4*k - 4*n >= 0)  &&  (79 + k >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/half.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/half.inv >>> [0m(19 + 2*i + 4*k - 4*n >= 0)  &&  (79 + k >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty II (invariant && loopcondition =S=> invariant) FAILS.
[0m
[32m[1m--------------------------------------------- Iteration 4 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[34m[1mTest Counter Example: (-151,-79,-150) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-153,-79,-151) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-155,-79,-152) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-156,-79,-155) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-157,-79,-156) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-158,-79,-157) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-167,-79,-158) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-169,-79,-159) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [713+:6002-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325445*n >= 0)  &&  (1 - 0.007603373563894297*i + 0.01263354084744693*k + 0.001472205060005735*n >= 0)  &&  (1 + 0.1052376801556932*i + 0.2104575586797544*k - 0.2104641270107486*n >= 0)  &&  (2.038007863695937 + 0.02025497438341475*i - 0.002859525795305611*k - 0.007625402120814966*n >= 0)  &&  (2.560898699251084 + 0.02916830902640912*i + 0.009459992116673227*k - 0.02522664564446195*n >= 0)  &&  (1.851035520503025 + 0.01379937380101318*i + 0.02759848669722179*k - 0.03619480508614126*n >= 0)  &&  (1 + 0.2019557483327325*i + 0.1413639994903457*k - 0.1413740481754795*n >= 0)  &&  (1 + 0.01980982567353407*i + 0.01109350237717908*k + 0.01664025356576862*n >= 0)  &&  (7.027322404371589 - 0.03825136612021851*i + 0.07650273224043719*k - 0.06010928961748629*n >= 0)  &&  (1 + 0.03324097450840895*i - 0.005540171353214531*k + 0.005540153482921785*n >= 0)  &&  (1 + 0.06793931140095173*i - 0.005860260092066111*k + 0.005853414287408321*n >= 0)  &&  (1 + 0.1498073841726405*i + 0.01728052386604639*k - 0.01729041094302453*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [713+:7088-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325445*n >= 0)  &&  (1 - 0.007603373563894297*i + 0.01263354084744693*k + 0.001472205060005735*n >= 0)  &&  (1 + 0.1052376801556932*i + 0.2104575586797544*k - 0.2104641270107486*n >= 0)  &&  (2.038007863695937 + 0.02025497438341475*i - 0.002859525795305611*k - 0.007625402120814966*n >= 0)  &&  (2.560898699251084 + 0.02916830902640912*i + 0.009459992116673227*k - 0.02522664564446195*n >= 0)  &&  (1.851035520503025 + 0.01379937380101318*i + 0.02759848669722179*k - 0.03619480508614126*n >= 0)  &&  (1 + 0.2019557483327325*i + 0.1413639994903457*k - 0.1413740481754795*n >= 0)  &&  (1 + 0.01980982567353407*i + 0.01109350237717908*k + 0.01664025356576862*n >= 0)  &&  (7.027322404371589 - 0.03825136612021851*i + 0.07650273224043719*k - 0.06010928961748629*n >= 0)  &&  (1 + 0.03324097450840895*i - 0.005540171353214531*k + 0.005540153482921785*n >= 0)  &&  (1 + 0.06793931140095173*i - 0.005860260092066111*k + 0.005853414287408321*n >= 0)  &&  (1 + 0.1498073841726405*i + 0.01728052386604639*k - 0.01729041094302453*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(50 + 10*i + 7*k - 7*n >= 0)  &&  (79 + k >= 0)  &&  (19 + 2*i + 4*k - 4*n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/half.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/half.inv >>> [0m(50 + 10*i + 7*k - 7*n >= 0)  &&  (79 + k >= 0)  &&  (19 + 2*i + 4*k - 4*n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 5 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[34m[1mTest Counter Example: (0,-1,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,-2,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-3,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,-4,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-4,-5,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-5,-6,-6) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-7,-7,-10) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-56,-77,-150) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [713+:8135-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325445*n >= 0)  &&  (1 - 0.007603373563894297*i + 0.01263354084744693*k + 0.001472205060005735*n >= 0)  &&  (1 + 2*k >= 0)  &&  (2.038007863695937 + 0.02025497438341475*i - 0.002859525795305611*k - 0.007625402120814966*n >= 0)  &&  (2.560898699251084 + 0.02916830902640912*i + 0.009459992116673227*k - 0.02522664564446195*n >= 0)  &&  (1.851035520503025 + 0.01379937380101318*i + 0.02759848669722179*k - 0.03619480508614126*n >= 0)  &&  (1 + 0.1052376801556932*i + 0.2104575586797544*k - 0.2104641270107486*n >= 0)  &&  (1 + 0.01980982567353407*i + 0.01109350237717908*k + 0.01664025356576862*n >= 0)  &&  (7.027322404371589 - 0.03825136612021851*i + 0.07650273224043719*k - 0.06010928961748629*n >= 0)  &&  (1 + 0.03324097450840895*i - 0.005540171353214531*k + 0.005540153482921785*n >= 0)  &&  (1 + 0.06793931140095173*i - 0.005860260092066111*k + 0.005853414287408321*n >= 0)  &&  (1 + 0.1498073841726405*i + 0.01728052386604639*k - 0.01729041094302453*n >= 0)  &&  (1 + 0.2019557483327325*i + 0.1413639994903457*k - 0.1413740481754795*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [713+:8810-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325445*n >= 0)  &&  (1 - 0.007603373563894297*i + 0.01263354084744693*k + 0.001472205060005735*n >= 0)  &&  (1 + 2*k >= 0)  &&  (2.038007863695937 + 0.02025497438341475*i - 0.002859525795305611*k - 0.007625402120814966*n >= 0)  &&  (2.560898699251084 + 0.02916830902640912*i + 0.009459992116673227*k - 0.02522664564446195*n >= 0)  &&  (1.851035520503025 + 0.01379937380101318*i + 0.02759848669722179*k - 0.03619480508614126*n >= 0)  &&  (1 + 0.1052376801556932*i + 0.2104575586797544*k - 0.2104641270107486*n >= 0)  &&  (1 + 0.01980982567353407*i + 0.01109350237717908*k + 0.01664025356576862*n >= 0)  &&  (7.027322404371589 - 0.03825136612021851*i + 0.07650273224043719*k - 0.06010928961748629*n >= 0)  &&  (1 + 0.03324097450840895*i - 0.005540171353214531*k + 0.005540153482921785*n >= 0)  &&  (1 + 0.06793931140095173*i - 0.005860260092066111*k + 0.005853414287408321*n >= 0)  &&  (1 + 0.1498073841726405*i + 0.01728052386604639*k - 0.01729041094302453*n >= 0)  &&  (1 + 0.2019557483327325*i + 0.1413639994903457*k - 0.1413740481754795*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(44 + 3*i >= 0)  &&  (19 + 2*i + 4*k - 4*n >= 0)  &&  (1 + 2*k >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/half.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/half.inv >>> [0m(44 + 3*i >= 0)  &&  (19 + 2*i + 4*k - 4*n >= 0)  &&  (1 + 2*k >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty II (invariant && loopcondition =S=> invariant) FAILS.
[0m
[32m[1m--------------------------------------------- Iteration 6 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[34m[1mTest Counter Example: (-1,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,0,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m?
[0m[34m[1mTest Counter Example: (0,0,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,0,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m?
[0m[34m[1mTest Counter Example: (-4,0,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m?
[0m[34m[1mTest Counter Example: (-5,0,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m?
[0m[34m[1mTest Counter Example: (1,0,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-6,0,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m?
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [713+:9580-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325445*n >= 0)  &&  (1 - 0.007603373563894297*i + 0.01263354084744693*k + 0.001472205060005735*n >= 0)  &&  (1 + 0.9995687371331543*i + 1.999137474266309*k - 1.999131649133183*n >= 0)  &&  (2.038007863695937 + 0.02025497438341475*i - 0.002859525795305611*k - 0.007625402120814966*n >= 0)  &&  (2.560898699251084 + 0.02916830902640912*i + 0.009459992116673227*k - 0.02522664564446195*n >= 0)  &&  (1.851035520503025 + 0.01379937380101318*i + 0.02759848669722179*k - 0.03619480508614126*n >= 0)  &&  (1 + 1.999999540060726*i + 2.322925627398581e-09*k + 2.322925627398581e-09*n >= 0)  &&  (1 + 0.01980982567353407*i + 0.01109350237717908*k + 0.01664025356576862*n >= 0)  &&  (7.027322404371589 - 0.03825136612021851*i + 0.07650273224043719*k - 0.06010928961748629*n >= 0)  &&  (1 + 0.03324097450840895*i - 0.005540171353214531*k + 0.005540153482921785*n >= 0)  &&  (1 + 0.06793931140095173*i - 0.005860260092066111*k + 0.005853414287408321*n >= 0)  &&  (1 + 2*k >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [713+:10491-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325445*n >= 0)  &&  (1 - 0.007603373563894297*i + 0.01263354084744693*k + 0.001472205060005735*n >= 0)  &&  (1 + 0.9995687371331543*i + 1.999137474266309*k - 1.999131649133183*n >= 0)  &&  (2.038007863695937 + 0.02025497438341475*i - 0.002859525795305611*k - 0.007625402120814966*n >= 0)  &&  (2.560898699251084 + 0.02916830902640912*i + 0.009459992116673227*k - 0.02522664564446195*n >= 0)  &&  (1.851035520503025 + 0.01379937380101318*i + 0.02759848669722179*k - 0.03619480508614126*n >= 0)  &&  (1 + 1.999999540060726*i + 2.322925627398581e-09*k + 2.322925627398581e-09*n >= 0)  &&  (1 + 0.01980982567353407*i + 0.01109350237717908*k + 0.01664025356576862*n >= 0)  &&  (7.027322404371589 - 0.03825136612021851*i + 0.07650273224043719*k - 0.06010928961748629*n >= 0)  &&  (1 + 0.03324097450840895*i - 0.005540171353214531*k + 0.005540153482921785*n >= 0)  &&  (1 + 0.06793931140095173*i - 0.005860260092066111*k + 0.005853414287408321*n >= 0)  &&  (1 + 2*k >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 + 2*k >= 0)  &&  (1 + 2*i >= 0)  &&  (1 + i + 2*k - 2*n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/half.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/half.inv >>> [0m(1 + 2*k >= 0)  &&  (1 + 2*i >= 0)  &&  (1 + i + 2*k - 2*n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 7 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[34m[1mTest Counter Example: (3,0,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (5,1,4) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (4,0,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (5,0,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (6,1,4) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (5,0,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (6,0,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[34m[1mTest Counter Example: (7,0,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [713+:12035-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325445*n >= 0)  &&  (1 - 0.8282835916425708*i + 1.208983669471483*k + 0.2429083071159281*n >= 0)  &&  (1 + 0.9995687371331543*i + 1.999137474266309*k - 1.999131649133183*n >= 0)  &&  (2.038007863695937 + 0.02025497438341475*i - 0.002859525795305611*k - 0.007625402120814966*n >= 0)  &&  (2.560898699251084 + 0.02916830902640912*i + 0.009459992116673227*k - 0.02522664564446195*n >= 0)  &&  (1.851035520503025 + 0.01379937380101318*i + 0.02759848669722179*k - 0.03619480508614126*n >= 0)  &&  (1 + 1.999999540060726*i + 2.322925627398581e-09*k + 2.322925627398581e-09*n >= 0)  &&  (1 + 0.01980982567353407*i + 0.01109350237717908*k + 0.01664025356576862*n >= 0)  &&  (7.027322404371589 - 0.03825136612021851*i + 0.07650273224043719*k - 0.06010928961748629*n >= 0)  &&  (1 + 0.03324097450840895*i - 0.005540171353214531*k + 0.005540153482921785*n >= 0)  &&  (1 + 0.06793931140095173*i - 0.005860260092066111*k + 0.005853414287408321*n >= 0)  &&  (1 + 2*k >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [713+:12771-]|-->> [33m(1 - 0.004348183751894986*i + 0.002538399163268424*k + 0.004653731799325445*n >= 0)  &&  (1 - 0.8282835916425708*i + 1.208983669471483*k + 0.2429083071159281*n >= 0)  &&  (1 + 0.9995687371331543*i + 1.999137474266309*k - 1.999131649133183*n >= 0)  &&  (2.038007863695937 + 0.02025497438341475*i - 0.002859525795305611*k - 0.007625402120814966*n >= 0)  &&  (2.560898699251084 + 0.02916830902640912*i + 0.009459992116673227*k - 0.02522664564446195*n >= 0)  &&  (1.851035520503025 + 0.01379937380101318*i + 0.02759848669722179*k - 0.03619480508614126*n >= 0)  &&  (1 + 1.999999540060726*i + 2.322925627398581e-09*k + 2.322925627398581e-09*n >= 0)  &&  (1 + 0.01980982567353407*i + 0.01109350237717908*k + 0.01664025356576862*n >= 0)  &&  (7.027322404371589 - 0.03825136612021851*i + 0.07650273224043719*k - 0.06010928961748629*n >= 0)  &&  (1 + 0.03324097450840895*i - 0.005540171353214531*k + 0.005540153482921785*n >= 0)  &&  (1 + 0.06793931140095173*i - 0.005860260092066111*k + 0.005853414287408321*n >= 0)  &&  (1 + 2*k >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 + 2*i >= 0)  &&  (29 - 24*i + 35*k + 7*n >= 0)  &&  (1 + i + 2*k - 2*n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/half.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/half.inv >>> [0m(1 + 2*i >= 0)  &&  (29 - 24*i + 35*k + 7*n >= 0)  &&  (1 + i + 2*k - 2*n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
