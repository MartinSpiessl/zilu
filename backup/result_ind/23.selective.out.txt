[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> conjunctive]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target 23
[  8%] Building CXX object CMakeFiles/23.dir/test/23.cpp.o
[ 16%] Building CXX object CMakeFiles/23.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/23.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/23.dir/src/state.cpp.o
[ 41%] Building CXX object CMakeFiles/23.dir/src/polynomial.cpp.o
[ 50%] Building CXX object CMakeFiles/23.dir/src/iif.cpp.o
[ 58%] Building CXX object CMakeFiles/23.dir/src/config.cpp.o
[ 66%] Building CXX object CMakeFiles/23.dir/src/classifier.cpp.o
[ 75%] Building CXX object CMakeFiles/23.dir/src/poly_learner.cpp.o
[ 83%] Building CXX object CMakeFiles/23.dir/src/conjunctive_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/23.dir/src/instrumentation.cpp.o
Linking CXX executable 23
[100%] Built target 23
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[0][0m
[33m  2)---->[1] :::::: 0	0	0	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt[0m
[34m[1mTest Counter Example: (0,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1][0m[#r6,#s24] -->   [1+:1141-]|-->> [33m(1 + 0.006914860776687041*n - 0.003827869358523184*sum + 0.01358276223992097*i >= 0)  &&  (1 + 0.001095879688065674*n + 0.005792506922632851*sum + 0.002093912975411199*i >= 0)  &&  (1 - 0.00500567503856116*n + 0.005180291609673758*sum + 0.008032362271179535*i >= 0)  &&  (1 - 0.001195349005686964*n + 0.005904299634150759*sum - 0.006012967725576847*i >= 0)  &&  (1 + 0.0129430264908673*n + 0.002177331559211322*sum - 0.008346437643643402*i >= 0) 
[0m[31m[2][0m[#r12,#s48] -->   [1+:1888-]|-->> [33m(1 + 0.006914860776687041*n - 0.003827869358523184*sum + 0.01358276223992097*i >= 0)  &&  (1 - 0.0002373887240356083*n + 0.02136498516320475*sum - 0.00427299703264095*i >= 0)  &&  (1 - 0.00500567503856116*n + 0.005180291609673758*sum + 0.008032362271179535*i >= 0)  &&  (1 - 0.001195349005686964*n + 0.005904299634150759*sum - 0.006012967725576847*i >= 0)  &&  (1 + 0.0129430264908673*n + 0.002177331559211322*sum - 0.008346437643643402*i >= 0)  &&  (1 + 0.004170310082733572*n + 0.01224187798479855*sum + 0.01008945987758122*i >= 0) 
[0m[31m[3][0m[#r18,#s72] -->   [1+:2624-]|-->> [33m(1 + 0.006914860776687041*n - 0.003827869358523184*sum + 0.01358276223992097*i >= 0)  &&  (1 - 0.005545286506469501*n + 0.0121996303142329*sum - 0.02365988909426987*i >= 0)  &&  (1 - 0.00500567503856116*n + 0.005180291609673758*sum + 0.008032362271179535*i >= 0)  &&  (1 - 0.005118940078289672*n - 0.009635651912074676*sum + 0.02198133092442036*i >= 0)  &&  (1 + 0.0129430264908673*n + 0.002177331559211322*sum - 0.008346437643643402*i >= 0)  &&  (1 + 0.004170310082733572*n + 0.01224187798479855*sum + 0.01008945987758122*i >= 0)  &&  (1 - 0.0002373887240356083*n + 0.02136498516320475*sum - 0.00427299703264095*i >= 0) 
[0m[31m[4][0m[#r24,#s96] -->   [1+:3840-]|-->> [33m(1 + 0.006914860776687041*n - 0.003827869358523184*sum + 0.01358276223992097*i >= 0)  &&  (1 - 0.02432283029297955*n - 0.01105583195135434*sum + 0.03869541182974019*i >= 0)  &&  (1 - 0.005545286506469501*n + 0.0121996303142329*sum - 0.02365988909426987*i >= 0)  &&  (1 - 0.005118940078289672*n - 0.009635651912074676*sum + 0.02198133092442036*i >= 0)  &&  (1 + 0.0129430264908673*n + 0.002177331559211322*sum - 0.008346437643643402*i >= 0)  &&  (1 + 0.004170310082733572*n + 0.01224187798479855*sum + 0.01008945987758122*i >= 0)  &&  (1 - 0.0002373887240356083*n + 0.02136498516320475*sum - 0.00427299703264095*i >= 0) 
[0m[31m[5][0m[#r30,#s120] -->   [1+:4963-]|-->> [33m(1 + 0.006914860776687041*n - 0.003827869358523184*sum + 0.01358276223992097*i >= 0)  &&  (1 - 0.02432283029297955*n - 0.01105583195135434*sum + 0.03869541182974019*i >= 0)  &&  (1 - 0.005545286506469501*n + 0.0121996303142329*sum - 0.02365988909426987*i >= 0)  &&  (1 - 0.005118940078289672*n - 0.009635651912074676*sum + 0.02198133092442036*i >= 0)  &&  (1 + 0.0129430264908673*n + 0.002177331559211322*sum - 0.008346437643643402*i >= 0)  &&  (1 + 0.004170310082733572*n + 0.01224187798479855*sum + 0.01008945987758122*i >= 0)  &&  (1 - 0.0002373887240356083*n + 0.02136498516320475*sum - 0.00427299703264095*i >= 0) 
[0m[31m[6][0m[#r36,#s144] -->   [1+:6686-]|-->> [33m(1 + 0.006914860776687041*n - 0.003827869358523184*sum + 0.01358276223992097*i >= 0)  &&  (1 - 0.02432283029297955*n - 0.01105583195135434*sum + 0.03869541182974019*i >= 0)  &&  (1 - 0.005545286506469501*n + 0.0121996303142329*sum - 0.02365988909426987*i >= 0)  &&  (1 - 0.005118940078289672*n - 0.009635651912074676*sum + 0.02198133092442036*i >= 0)  &&  (1 + 0.0129430264908673*n + 0.002177331559211322*sum - 0.008346437643643402*i >= 0)  &&  (1 + 0.004170310082733572*n + 0.01224187798479855*sum + 0.01008945987758122*i >= 0)  &&  (1 - 0.0002373887240356083*n + 0.02136498516320475*sum - 0.00427299703264095*i >= 0) 
[0m[31m[7][0m[#r42,#s168] -->   [1+:7418-]|-->> [33m(1 + 0.006914860776687041*n - 0.003827869358523184*sum + 0.01358276223992097*i >= 0)  &&  (1 - 0.02432283029297955*n - 0.01105583195135434*sum + 0.03869541182974019*i >= 0)  &&  (1 - 0.005545286506469501*n + 0.0121996303142329*sum - 0.02365988909426987*i >= 0)  &&  (1 - 0.005118940078289672*n - 0.009635651912074676*sum + 0.02198133092442036*i >= 0)  &&  (1 + 0.0129430264908673*n + 0.002177331559211322*sum - 0.008346437643643402*i >= 0)  &&  (1 + 0.004170310082733572*n + 0.01224187798479855*sum + 0.01008945987758122*i >= 0)  &&  (1 - 0.0002373887240356083*n + 0.02136498516320475*sum - 0.00427299703264095*i >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 7 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/23.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/23.inv >>> [0m(1 >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 2 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt[0m
[34m[1mTest Counter Example: (0,-1,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,-2,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,-3,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-4,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,-5,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-4,-6,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-5,-7,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-6,-8,-6) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1][0m[#r6,#s24] -->   [1+:8268-]|-->> [33m(1 + 0.006914860776687041*n - 0.003827869358523184*sum + 0.01358276223992097*i >= 0)  &&  (1 + 2*sum >= 0)  &&  (1 - 0.02432283029297955*n - 0.01105583195135434*sum + 0.03869541182974019*i >= 0)  &&  (1 - 0.005545286506469501*n + 0.0121996303142329*sum - 0.02365988909426987*i >= 0)  &&  (1 + 0.0129430264908673*n + 0.002177331559211322*sum - 0.008346437643643402*i >= 0)  &&  (1 - 0.005118940078289672*n - 0.009635651912074676*sum + 0.02198133092442036*i >= 0) 
[0m[31m[2][0m[#r12,#s48] -->   [1+:8676-]|-->> [33m(1 + 0.006914860776687041*n - 0.003827869358523184*sum + 0.01358276223992097*i >= 0)  &&  (1 + 2*sum >= 0)  &&  (1 - 0.02432283029297955*n - 0.01105583195135434*sum + 0.03869541182974019*i >= 0)  &&  (1 - 0.005545286506469501*n + 0.0121996303142329*sum - 0.02365988909426987*i >= 0)  &&  (1 + 0.0129430264908673*n + 0.002177331559211322*sum - 0.008346437643643402*i >= 0)  &&  (1 - 0.005118940078289672*n - 0.009635651912074676*sum + 0.02198133092442036*i >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 + 2*sum >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/23.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/23.inv >>> [0m(1 + 2*sum >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 3 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt[0m
[34m[1mTest Counter Example: (0,0,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,1,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,0,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,0,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-4,0,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-5,0,-6) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-6,0,-7) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,0,-8) @/home/lijiaying/Research/GitHub/ZILU/tmp/23.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1][0m[#r6,#s24] -->   [1+:9949-]|-->> [33m(1 + 0.006914860776687041*n - 0.003827869358523184*sum + 0.01358276223992097*i >= 0)  &&  (1 + 2*i >= 0)  &&  (1 + 2*sum >= 0)  &&  (1 - 0.02432283029297955*n - 0.01105583195135434*sum + 0.03869541182974019*i >= 0)  &&  (1 + 0.0129430264908673*n + 0.002177331559211322*sum - 0.008346437643643402*i >= 0)  &&  (1 - 0.005545286506469501*n + 0.0121996303142329*sum - 0.02365988909426987*i >= 0)  &&  (1 - 0.005118940078289672*n - 0.009635651912074676*sum + 0.02198133092442036*i >= 0) 
[0m[31m[2][0m[#r12,#s48] -->   [1+:10811-]|-->> [33m(1 + 0.006914860776687041*n - 0.003827869358523184*sum + 0.01358276223992097*i >= 0)  &&  (1 + 2*i >= 0)  &&  (1 + 2*sum >= 0)  &&  (1 - 0.02432283029297955*n - 0.01105583195135434*sum + 0.03869541182974019*i >= 0)  &&  (1 + 0.0129430264908673*n + 0.002177331559211322*sum - 0.008346437643643402*i >= 0)  &&  (1 - 0.005545286506469501*n + 0.0121996303142329*sum - 0.02365988909426987*i >= 0)  &&  (1 - 0.005118940078289672*n - 0.009635651912074676*sum + 0.02198133092442036*i >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 + 2*sum >= 0)  &&  (1 + 2*i >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/23.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/23.inv >>> [0m(1 + 2*sum >= 0)  &&  (1 + 2*i >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[1m[32m-----------------------------------------------------------finish proving---------------------------------------------------------------[0m
[32mThe invariant can be [33m(1 + 2*sum >= 0)  &&  (1 + 2*i >= 0) [0m

=====================time=========================
