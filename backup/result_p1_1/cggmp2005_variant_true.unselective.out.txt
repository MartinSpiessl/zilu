[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> conjunctive]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target cggmp2005_variant_true
[  8%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/test/cggmp2005_variant_true.cpp.o
[ 16%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/state.cpp.o
[ 41%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/polynomial.cpp.o
[ 50%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/iif.cpp.o
[ 58%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/config.cpp.o
[ 66%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/classifier.cpp.o
[ 75%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/poly_learner.cpp.o
[ 83%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/conjunctive_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/instrumentation.cpp.o
Linking CXX executable cggmp2005_variant_true
[100%] Built target cggmp2005_variant_true
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[0][0m
[33m  2)---->[1] :::::: 0	1	2	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[34m[1mTest Counter Example: (0,1,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:1114-]|-->> [33m(1.001065643648764 + 0.00937766410912191*low - 0.004049445865302643*mid + 0.001491901108269395*high >= 0)  &&  (1.015681926184065 - 0.007497755953323829*low - 0.003537673583610539*mid - 0.006072126300227044*high >= 0)  &&  (1.020700445300277 - 0.0113130340594536*low - 0.01877482248164641*mid - 0.0009628114093152005*high >= 0)  &&  (0.9986549598356061 - 0.004147207173547544*low + 0.005230711750420326*mid + 0.005492247337941341*high >= 0)  &&  (1.038413878562577 + 0.009913258983890954*low - 0.003717472118959108*mid - 0.01734820322180917*high >= 0)  &&  (0.9818360333824252 + 0.01227295041728031*low - 0.02110947471772214*mid + 0.0196367206676485*high >= 0)  &&  (0.9894672047055605 + 0.003282949182682443*low + 0.01449969222351412*mid + 0.007249846111757063*high >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:2546-]|-->> [33m(1.010120796604636 + 0.005550114267058438*low + 0.01991511589944499*mid - 0.01501795625204048*high >= 0)  &&  (1.015681926184065 - 0.007497755953323829*low - 0.003537673583610539*mid - 0.006072126300227044*high >= 0)  &&  (1.01978542566532 - 0.02312944127072593*low + 0.003344015605406158*mid + 0.003344015605406158*high >= 0)  &&  (1.020700445300277 - 0.0113130340594536*low - 0.01877482248164641*mid - 0.0009628114093152005*high >= 0)  &&  (1.038413878562577 + 0.009913258983890954*low - 0.003717472118959108*mid - 0.01734820322180917*high >= 0)  &&  (0.9818360333824252 + 0.01227295041728031*low - 0.02110947471772214*mid + 0.0196367206676485*high >= 0)  &&  (0.9894672047055605 + 0.003282949182682443*low + 0.01449969222351412*mid + 0.007249846111757063*high >= 0) 
[0m[31m[3Pure Random][0m[#r90,#s0] -->   [2+:3984-]|-->> [33m(1.001067235859125 + 0.0416221985058698*low - 0.01814300960512273*mid + 0.008537886872998933*high >= 0)  &&  (1.015681926184065 - 0.007497755953323829*low - 0.003537673583610539*mid - 0.006072126300227044*high >= 0)  &&  (1.000033870175617 + 0.03031380717709023*low + 0.06059374417856356*mid - 0.03031380717709022*high >= 0)  &&  (1.010120796604636 + 0.005550114267058438*low + 0.01991511589944499*mid - 0.01501795625204048*high >= 0)  &&  (1.038413878562577 + 0.009913258983890954*low - 0.003717472118959108*mid - 0.01734820322180917*high >= 0)  &&  (0.9818360333824252 + 0.01227295041728031*low - 0.02110947471772214*mid + 0.0196367206676485*high >= 0)  &&  (0.9894672047055605 + 0.003282949182682443*low + 0.01449969222351412*mid + 0.007249846111757063*high >= 0)  &&  (1.020700445300277 - 0.0113130340594536*low - 0.01877482248164641*mid - 0.0009628114093152005*high >= 0)  &&  (1.01978542566532 - 0.02312944127072593*low + 0.003344015605406158*mid + 0.003344015605406158*high >= 0) 
[0m[31m[4Pure Random][0m[#r120,#s0] -->   [2+:5351-]|-->> [33m(0.8905908096280087 + 0.0175054704595186*low + 0.09190371991247265*high >= 0)  &&  (0.9750519750519751 + 0.06652806652806653*low - 0.0498960498960499*mid + 0.03742203742203742*high >= 0)  &&  (1.04302925989673 - 0.01032702237521515*low - 0.005163511187607574*mid - 0.0189328743545611*high >= 0)  &&  (1.001067235859125 + 0.0416221985058698*low - 0.01814300960512273*mid + 0.008537886872998933*high >= 0)  &&  (1.038413878562577 + 0.009913258983890954*low - 0.003717472118959108*mid - 0.01734820322180917*high >= 0)  &&  (1.000033870175617 + 0.03031380717709023*low + 0.06059374417856356*mid - 0.03031380717709022*high >= 0)  &&  (1.01978542566532 - 0.02312944127072593*low + 0.003344015605406158*mid + 0.003344015605406158*high >= 0)  &&  (1.020700445300277 - 0.0113130340594536*low - 0.01877482248164641*mid - 0.0009628114093152005*high >= 0) 
[0m[31m[5Pure Random][0m[#r150,#s0] -->   [2+:6837-]|-->> [33m(0.8905908096280087 + 0.0175054704595186*low + 0.09190371991247265*high >= 0)  &&  (0.9750519750519751 + 0.06652806652806653*low - 0.0498960498960499*mid + 0.03742203742203742*high >= 0)  &&  (1.04302925989673 - 0.01032702237521515*low - 0.005163511187607574*mid - 0.0189328743545611*high >= 0)  &&  (1.001067235859125 + 0.0416221985058698*low - 0.01814300960512273*mid + 0.008537886872998933*high >= 0)  &&  (1.038413878562577 + 0.009913258983890954*low - 0.003717472118959108*mid - 0.01734820322180917*high >= 0)  &&  (1.000033870175617 + 0.03031380717709023*low + 0.06059374417856356*mid - 0.03031380717709022*high >= 0)  &&  (1.01978542566532 - 0.02312944127072593*low + 0.003344015605406158*mid + 0.003344015605406158*high >= 0)  &&  (1.020700445300277 - 0.0113130340594536*low - 0.01877482248164641*mid - 0.0009628114093152005*high >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 5 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(10 + high >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.inv >>> [0m(10 + high >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 2 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[34m[1mTest Counter Example: (3,1,-10) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (3,2,-10) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (4,1,-10) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,1,-10) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,3,-10) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,1,-10) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,1,-10) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-4,1,-10) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:9274-]|-->> [33m(1.162692847124825 + 0.002805049088359046*low - 0.01683029453015428*mid - 0.0729312762973352*high >= 0)  &&  (0.8571428571428572 - 0.03174603174603174*low - 0.01587301587301587*mid + 0.1746031746031746*high >= 0)  &&  (0.8905908096280087 + 0.0175054704595186*low + 0.09190371991247265*high >= 0)  &&  (0.9750519750519751 + 0.06652806652806653*low - 0.0498960498960499*mid + 0.03742203742203742*high >= 0)  &&  (1.000033870175617 + 0.03031380717709023*low + 0.06059374417856356*mid - 0.03031380717709022*high >= 0)  &&  (1.01978542566532 - 0.02312944127072593*low + 0.003344015605406158*mid + 0.003344015605406158*high >= 0)  &&  (1.020700445300277 - 0.0113130340594536*low - 0.01877482248164641*mid - 0.0009628114093152005*high >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:10004-]|-->> [33m(1.162692847124825 + 0.002805049088359046*low - 0.01683029453015428*mid - 0.0729312762973352*high >= 0)  &&  (0.8571428571428572 - 0.03174603174603174*low - 0.01587301587301587*mid + 0.1746031746031746*high >= 0)  &&  (0.8905908096280087 + 0.0175054704595186*low + 0.09190371991247265*high >= 0)  &&  (0.9750519750519751 + 0.06652806652806653*low - 0.0498960498960499*mid + 0.03742203742203742*high >= 0)  &&  (1.000033870175617 + 0.03031380717709023*low + 0.06059374417856356*mid - 0.03031380717709022*high >= 0)  &&  (1.01978542566532 - 0.02312944127072593*low + 0.003344015605406158*mid + 0.003344015605406158*high >= 0)  &&  (1.020700445300277 - 0.0113130340594536*low - 0.01877482248164641*mid - 0.0009628114093152005*high >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(5 + high >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.inv >>> [0m(5 + high >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 3 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[34m[1mTest Counter Example: (10,1,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (10,2,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (11,1,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,1,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,3,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,1,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,1,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-4,1,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:11181-]|-->> [33m(1.080971659919028 - 0.01214574898785425*low - 0.08906882591093115*mid + 0.004048582995951416*high >= 0)  &&  (0.6086956521739131 + 0.1304347826086956*low - 0.04347826086956522*mid + 0.2608695652173913*high >= 0)  &&  (1.162692847124825 + 0.002805049088359046*low - 0.01683029453015428*mid - 0.0729312762973352*high >= 0)  &&  (0.8571428571428572 - 0.03174603174603174*low - 0.01587301587301587*mid + 0.1746031746031746*high >= 0)  &&  (0.9750519750519751 + 0.06652806652806653*low - 0.0498960498960499*mid + 0.03742203742203742*high >= 0)  &&  (1.000033870175617 + 0.03031380717709023*low + 0.06059374417856356*mid - 0.03031380717709022*high >= 0)  &&  (1.01978542566532 - 0.02312944127072593*low + 0.003344015605406158*mid + 0.003344015605406158*high >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:12767-]|-->> [33m(1.080971659919028 - 0.01214574898785425*low - 0.08906882591093115*mid + 0.004048582995951416*high >= 0)  &&  (0.6086956521739131 + 0.1304347826086956*low - 0.04347826086956522*mid + 0.2608695652173913*high >= 0)  &&  (1.162692847124825 + 0.002805049088359046*low - 0.01683029453015428*mid - 0.0729312762973352*high >= 0)  &&  (0.8571428571428572 - 0.03174603174603174*low - 0.01587301587301587*mid + 0.1746031746031746*high >= 0)  &&  (0.9750519750519751 + 0.06652806652806653*low - 0.0498960498960499*mid + 0.03742203742203742*high >= 0)  &&  (1.000033870175617 + 0.03031380717709023*low + 0.06059374417856356*mid - 0.03031380717709022*high >= 0)  &&  (1.01978542566532 - 0.02312944127072593*low + 0.003344015605406158*mid + 0.003344015605406158*high >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(5 + high >= 0)  &&  (5 + low + 2*high >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.inv >>> [0m(5 + high >= 0)  &&  (5 + low + 2*high >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 4 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[34m[1mTest Counter Example: (-5,1,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,2,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,1,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-7,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-9,1,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,1,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (3,1,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-11,1,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:14269-]|-->> [33m(1.080971659919028 - 0.01214574898785425*low - 0.08906882591093115*mid + 0.004048582995951416*high >= 0)  &&  (0.6086956521739131 + 0.1304347826086956*low - 0.04347826086956522*mid + 0.2608695652173913*high >= 0)  &&  (1.162692847124825 + 0.002805049088359046*low - 0.01683029453015428*mid - 0.0729312762973352*high >= 0)  &&  (0.8571428571428572 - 0.03174603174603174*low - 0.01587301587301587*mid + 0.1746031746031746*high >= 0)  &&  (0.9750519750519751 + 0.06652806652806653*low - 0.0498960498960499*mid + 0.03742203742203742*high >= 0)  &&  (1.000033870175617 + 0.03031380717709023*low + 0.06059374417856356*mid - 0.03031380717709022*high >= 0)  &&  (1.01978542566532 - 0.02312944127072593*low + 0.003344015605406158*mid + 0.003344015605406158*high >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:15787-]|-->> [33m(1.080971659919028 - 0.01214574898785425*low - 0.08906882591093115*mid + 0.004048582995951416*high >= 0)  &&  (0.6086956521739131 + 0.1304347826086956*low - 0.04347826086956522*mid + 0.2608695652173913*high >= 0)  &&  (1.162692847124825 + 0.002805049088359046*low - 0.01683029453015428*mid - 0.0729312762973352*high >= 0)  &&  (0.8571428571428572 - 0.03174603174603174*low - 0.01587301587301587*mid + 0.1746031746031746*high >= 0)  &&  (0.9750519750519751 + 0.06652806652806653*low - 0.0498960498960499*mid + 0.03742203742203742*high >= 0)  &&  (1.000033870175617 + 0.03031380717709023*low + 0.06059374417856356*mid - 0.03031380717709022*high >= 0)  &&  (1.01978542566532 - 0.02312944127072593*low + 0.003344015605406158*mid + 0.003344015605406158*high >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
