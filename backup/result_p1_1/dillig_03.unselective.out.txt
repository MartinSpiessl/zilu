[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> conjunctive]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target dillig_03
[  8%] Building CXX object CMakeFiles/dillig_03.dir/test/dillig_03.cpp.o
[ 16%] Building CXX object CMakeFiles/dillig_03.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/dillig_03.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/dillig_03.dir/src/state.cpp.o
[ 41%] Building CXX object CMakeFiles/dillig_03.dir/src/polynomial.cpp.o
[ 50%] Building CXX object CMakeFiles/dillig_03.dir/src/iif.cpp.o
[ 58%] Building CXX object CMakeFiles/dillig_03.dir/src/config.cpp.o
[ 66%] Building CXX object CMakeFiles/dillig_03.dir/src/classifier.cpp.o
[ 75%] Building CXX object CMakeFiles/dillig_03.dir/src/poly_learner.cpp.o
[ 83%] Building CXX object CMakeFiles/dillig_03.dir/src/conjunctive_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/dillig_03.dir/src/instrumentation.cpp.o
Linking CXX executable dillig_03
[100%] Built target dillig_03
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[0][0m
[33m  2)---->[1] :::::: 1	1	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt[0m
[34m[1mTest Counter Example: (1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r20,#s0] -->   [2+:67-]|-->> [33m(0.9975415225408079 - 0.003773477030387925*k + 0.01000543151996798*w >= 0)  &&  (0.980390174871121 + 0.007581117962195492*k + 0.01202870716668351*w >= 0)  &&  (0.9888557036508715 + 0.01319484687736816*k - 0.002050550528239647*w >= 0) 
[0m[31m[2Pure Random][0m[#r40,#s0] -->   [2+:122-]|-->> [33m(0.76 + 0.08*k + 0.16*w >= 0)  &&  (1.114754098360656 - 0.09836065573770492*k + 0.08196721311475409*w >= 0)  &&  (1.083898827884022 - 0.04811844540407156*k + 0.01233806292412091*w >= 0)  &&  (0.9992495309568481 + 0.02776735459662289*k - 0.02701688555347092*w >= 0) 
[0m[31m[3Pure Random][0m[#r60,#s0] -->   [2+:217-]|-->> [33m(0.9452054794520548 - 0.0821917808219178*k + 0.2191780821917808*w >= 0)  &&  (0.76 + 0.08*k + 0.16*w >= 0)  &&  (1.114754098360656 - 0.09836065573770492*k + 0.08196721311475409*w >= 0)  &&  (1.083898827884022 - 0.04811844540407156*k + 0.01233806292412091*w >= 0)  &&  (0.9992495309568481 + 0.02776735459662289*k - 0.02701688555347092*w >= 0) 
[0m[31m[4Pure Random][0m[#r80,#s0] -->   [2+:267-]|-->> [33m(1.017699115044248 + 0.1238938053097345*k - 0.1415929203539823*w >= 0)  &&  (0.9452054794520548 - 0.0821917808219178*k + 0.2191780821917808*w >= 0)  &&  (0.76 + 0.08*k + 0.16*w >= 0)  &&  (1.114754098360656 - 0.09836065573770492*k + 0.08196721311475409*w >= 0)  &&  (1.083898827884022 - 0.04811844540407156*k + 0.01233806292412091*w >= 0) 
[0m[31m[5Pure Random][0m[#r100,#s0] -->   [2+:317-]|-->> [33m(1.017699115044248 + 0.1238938053097345*k - 0.1415929203539823*w >= 0)  &&  (0.9452054794520548 - 0.0821917808219178*k + 0.2191780821917808*w >= 0)  &&  (0.76 + 0.08*k + 0.16*w >= 0)  &&  (1.114754098360656 - 0.09836065573770492*k + 0.08196721311475409*w >= 0)  &&  (1.083898827884022 - 0.04811844540407156*k + 0.01233806292412091*w >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 5 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(33 + 4*k - 5*w >= 0)  &&  (4 + w >= 0)  &&  (10 + k + 2*w >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.inv >>> [0m(33 + 4*k - 5*w >= 0)  &&  (4 + w >= 0)  &&  (10 + k + 2*w >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00004.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00005.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [0m
[32m[1m--------------------------------------------- Iteration 2 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt[0m
[34m[1mTest Counter Example: (-8,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-5,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-6,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-4,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r20,#s0] -->   [2+:471-]|-->> [33m(0.6 + 0.2666666666666667*k + 0.1333333333333333*w >= 0)  &&  (1.017699115044248 + 0.1238938053097345*k - 0.1415929203539823*w >= 0)  &&  (0.9452054794520548 - 0.0821917808219178*k + 0.2191780821917808*w >= 0)  &&  (1.114754098360656 - 0.09836065573770492*k + 0.08196721311475409*w >= 0)  &&  (1.083898827884022 - 0.04811844540407156*k + 0.01233806292412091*w >= 0) 
[0m[31m[2Pure Random][0m[#r40,#s0] -->   [2+:557-]|-->> [33m(0.6 + 0.2666666666666667*k + 0.1333333333333333*w >= 0)  &&  (1.017699115044248 + 0.1238938053097345*k - 0.1415929203539823*w >= 0)  &&  (0.9452054794520548 - 0.0821917808219178*k + 0.2191780821917808*w >= 0)  &&  (1.114754098360656 - 0.09836065573770492*k + 0.08196721311475409*w >= 0)  &&  (1.083898827884022 - 0.04811844540407156*k + 0.01233806292412091*w >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(9 + 4*k + 2*w >= 0)  &&  (33 + 4*k - 5*w >= 0)  &&  (4 + w >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.inv >>> [0m(9 + 4*k + 2*w >= 0)  &&  (33 + 4*k - 5*w >= 0)  &&  (4 + w >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 3 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt[0m
[34m[1mTest Counter Example: (-1,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (2,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r20,#s0] -->   [2+:655-]|-->> [33m(0.2307692307692307 + 0.3076923076923077*k + 0.4615384615384616*w >= 0)  &&  (0.6 + 0.2666666666666667*k + 0.1333333333333333*w >= 0)  &&  (1.017699115044248 + 0.1238938053097345*k - 0.1415929203539823*w >= 0)  &&  (0.9452054794520548 - 0.0821917808219178*k + 0.2191780821917808*w >= 0)  &&  (1.114754098360656 - 0.09836065573770492*k + 0.08196721311475409*w >= 0)  &&  (1.083898827884022 - 0.04811844540407156*k + 0.01233806292412091*w >= 0) 
[0m[31m[2Pure Random][0m[#r40,#s0] -->   [2+:728-]|-->> [33m(0.2307692307692307 + 0.3076923076923077*k + 0.4615384615384616*w >= 0)  &&  (0.6 + 0.2666666666666667*k + 0.1333333333333333*w >= 0)  &&  (1.017699115044248 + 0.1238938053097345*k - 0.1415929203539823*w >= 0)  &&  (0.9452054794520548 - 0.0821917808219178*k + 0.2191780821917808*w >= 0)  &&  (1.114754098360656 - 0.09836065573770492*k + 0.08196721311475409*w >= 0)  &&  (1.083898827884022 - 0.04811844540407156*k + 0.01233806292412091*w >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(3 + 4*k + 6*w >= 0)  &&  (4 + w >= 0)  &&  (33 + 4*k - 5*w >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.inv >>> [0m(3 + 4*k + 6*w >= 0)  &&  (4 + w >= 0)  &&  (33 + 4*k - 5*w >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 4 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt[0m
[34m[1mTest Counter Example: (6,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (7,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (3,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (8,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m?
[0m[34m[1mTest Counter Example: (4,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m?
[0m[34m[1mTest Counter Example: (1,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (4,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[34m[1mTest Counter Example: (5,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r20,#s0] -->   [2+:854-]|-->> [33m(0.8 - 0.2000000000000001*k + 0.6000000000000001*w >= 0)  &&  (0.2307692307692307 + 0.3076923076923077*k + 0.4615384615384616*w >= 0)  &&  (0.6 + 0.2666666666666667*k + 0.1333333333333333*w >= 0)  &&  (1.017699115044248 + 0.1238938053097345*k - 0.1415929203539823*w >= 0)  &&  (1.114754098360656 - 0.09836065573770492*k + 0.08196721311475409*w >= 0)  &&  (1.083898827884022 - 0.04811844540407156*k + 0.01233806292412091*w >= 0) 
[0m[31m[2Pure Random][0m[#r40,#s0] -->   [2+:996-]|-->> [33m(0.8 - 0.2000000000000001*k + 0.6000000000000001*w >= 0)  &&  (0.2307692307692307 + 0.3076923076923077*k + 0.4615384615384616*w >= 0)  &&  (0.6 + 0.2666666666666667*k + 0.1333333333333333*w >= 0)  &&  (1.017699115044248 + 0.1238938053097345*k - 0.1415929203539823*w >= 0)  &&  (1.114754098360656 - 0.09836065573770492*k + 0.08196721311475409*w >= 0)  &&  (1.083898827884022 - 0.04811844540407156*k + 0.01233806292412091*w >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(4 - k + 3*w >= 0)  &&  (3 + 4*k + 6*w >= 0)  &&  (33 + 4*k - 5*w >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_03.inv >>> [0m(4 - k + 3*w >= 0)  &&  (3 + 4*k + 6*w >= 0)  &&  (33 + 4*k - 5*w >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> 