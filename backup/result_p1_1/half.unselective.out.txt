[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> conjunctive]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target half
[  8%] Building CXX object CMakeFiles/half.dir/test/half.cpp.o
[ 16%] Building CXX object CMakeFiles/half.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/half.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/half.dir/src/state.cpp.o
[ 41%] Building CXX object CMakeFiles/half.dir/src/polynomial.cpp.o
[ 50%] Building CXX object CMakeFiles/half.dir/src/iif.cpp.o
[ 58%] Building CXX object CMakeFiles/half.dir/src/config.cpp.o
[ 66%] Building CXX object CMakeFiles/half.dir/src/classifier.cpp.o
[ 75%] Building CXX object CMakeFiles/half.dir/src/poly_learner.cpp.o
[ 83%] Building CXX object CMakeFiles/half.dir/src/conjunctive_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/half.dir/src/instrumentation.cpp.o
Linking CXX executable half
[100%] Built target half
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[0][0m
[33m  2)---->[1] :::::: 0	0	0	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[34m[1mTest Counter Example: (0,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [1+:1153-]|-->> [33m(1 + 0.004373271593028491*i - 0.005530902308830151*k - 0.0144060711299762*n >= 0)  &&  (1 - 0.0001072328561471235*i + 0.007184601361857274*k + 0.0127607098815077*n >= 0)  &&  (1 + 0.004583104575943475*i + 0.004105697849282696*k - 0.00759076695390638*n >= 0)  &&  (1 - 0.00310077519379845*i - 0.001823985408116735*k - 0.008846329229366165*n >= 0)  &&  (1 + 0.004487126221198704*i - 0.004415901995465391*k - 0.002801486212176968*n >= 0)  &&  (1 - 0.01255742725880551*i + 0.01745788667687596*k + 0.01225114854517611*n >= 0)  &&  (1 + 0.01749063001963234*i - 0.006960556844547564*k + 0.001606282348741745*n >= 0)  &&  (1 + 0.03563791874554526*i - 0.01069137562366358*k + 0.006414825374198147*n >= 0)  &&  (1 + 0.07261724659606657*i - 0.006051437216338881*k + 0.02723146747352496*n >= 0)  &&  (1 + 0.09708737864077668*i + 0.04854368932038834*k + 0.08737864077669902*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [1+:2894-]|-->> [33m(1 - 0.1212121212121212*i - 0.1212121212121212*k - 0.303030303030303*n >= 0)  &&  (1 - 0.0001072328561471235*i + 0.007184601361857274*k + 0.0127607098815077*n >= 0)  &&  (1 + 0.1212121212121212*i - 0.1515151515151515*k - 0.1515151515151515*n >= 0)  &&  (1 + 0.08722741433021806*i - 0.06230529595015576*k - 0.03115264797507788*n >= 0)  &&  (1 + 0.004487126221198704*i - 0.004415901995465391*k - 0.002801486212176968*n >= 0)  &&  (1 - 0.01255742725880551*i + 0.01745788667687596*k + 0.01225114854517611*n >= 0)  &&  (1 + 0.09708737864077668*i + 0.04854368932038834*k + 0.08737864077669902*n >= 0)  &&  (1 + 0.07261724659606657*i - 0.006051437216338881*k + 0.02723146747352496*n >= 0) 
[0m[31m[3Pure Random][0m[#r90,#s0] -->   [1+:3830-]|-->> [33m(1 - 0.1212121212121212*i - 0.1212121212121212*k - 0.303030303030303*n >= 0)  &&  (1 - 0.0001072328561471235*i + 0.007184601361857274*k + 0.0127607098815077*n >= 0)  &&  (1 + 0.1212121212121212*i - 0.1515151515151515*k - 0.1515151515151515*n >= 0)  &&  (1 + 0.08722741433021806*i - 0.06230529595015576*k - 0.03115264797507788*n >= 0)  &&  (1 + 0.004487126221198704*i - 0.004415901995465391*k - 0.002801486212176968*n >= 0)  &&  (1 - 0.01255742725880551*i + 0.01745788667687596*k + 0.01225114854517611*n >= 0)  &&  (1 + 0.09708737864077668*i + 0.04854368932038834*k + 0.08737864077669902*n >= 0)  &&  (1 + 0.07261724659606657*i - 0.006051437216338881*k + 0.02723146747352496*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 3 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(16 - 2*i - 2*k - 5*n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/half.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/half.inv >>> [0m(16 - 2*i - 2*k - 5*n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 2 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt[0m
[34m[1mTest Counter Example: (0,3,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,4,4) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,5,5) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,6,6) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,7,7) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,8,8) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,9,9) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,10,10) @/home/lijiaying/Research/GitHub/ZILU/tmp/half.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [37+:4394-]|-->> [33m(1 + 0.499877464552139*i + 0.9997827808479585*k - 0.9996958931871429*n >= 0)  &&  (1 - 0.0001072328561471235*i + 0.007184601361857274*k + 0.0127607098815077*n >= 0)  &&  (1 + 0.888669733959771*i + 0.2222122606345349*k - 0.2221226063453505*n >= 0)  &&  (1.128053373506941 - 0.001076078768965888*i - 0.002905412676207898*k - 0.009899924674486173*n >= 0)  &&  (1 - 0.01255742725880551*i + 0.01745788667687596*k + 0.01225114854517611*n >= 0)  &&  (1.018508236165093 + 0.0181380714417916*i - 0.005367388487877104*k + 0.003516564871367758*n >= 0)  &&  (1 + 0.03736930648089738*i - 0.008929540366860701*k + 0.008976585655235956*n >= 0)  &&  (1 + 0.07261724659606657*i - 0.006051437216338881*k + 0.02723146747352496*n >= 0)  &&  (1 + 0.09708737864077668*i + 0.04854368932038834*k + 0.08737864077669902*n >= 0)  &&  (1 + 0.1342878316274433*i - 0.02396586842378504*k + 0.02399407144315899*n >= 0)  &&  (1 + 0.328732407492469*i - 0.02737090198502279*k + 0.02741783259705538*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [37+:5007-]|-->> [33m(1.26233952635356 - 0.01435292241448051*i - 0.004624830555777051*k - 0.009568614942987004*n >= 0)  &&  (1 - 0.0001072328561471235*i + 0.007184601361857274*k + 0.0127607098815077*n >= 0)  &&  (1 + 0.499877464552139*i + 0.9997827808479585*k - 0.9996958931871429*n >= 0)  &&  (1.128053373506941 - 0.001076078768965888*i - 0.002905412676207898*k - 0.009899924674486173*n >= 0)  &&  (1 - 0.01255742725880551*i + 0.01745788667687596*k + 0.01225114854517611*n >= 0)  &&  (1 + 0.888669733959771*i + 0.2222122606345349*k - 0.2221226063453505*n >= 0)  &&  (1 + 0.03736930648089738*i - 0.008929540366860701*k + 0.008976585655235956*n >= 0)  &&  (1 + 0.07261724659606657*i - 0.006051437216338881*k + 0.02723146747352496*n >= 0)  &&  (1 + 0.09708737864077668*i + 0.04854368932038834*k + 0.08737864077669902*n >= 0)  &&  (1 + 0.1342878316274433*i - 0.02396586842378504*k + 0.02399407144315899*n >= 0)  &&  (1 + 0.328732407492469*i - 0.02737090198502279*k + 0.02741783259705538*n >= 0) 
[0m[31m[3Pure Random][0m[#r90,#s0] -->   [37+:5998-]|-->> [33m(1.26233952635356 - 0.01435292241448051*i - 0.004624830555777051*k - 0.009568614942987004*n >= 0)  &&  (1 - 0.0001072328561471235*i + 0.007184601361857274*k + 0.0127607098815077*n >= 0)  &&  (1 + 0.499877464552139*i + 0.9997827808479585*k - 0.9996958931871429*n >= 0)  &&  (1.128053373506941 - 0.001076078768965888*i - 0.002905412676207898*k - 0.009899924674486173*n >= 0)  &&  (1 - 0.01255742725880551*i + 0.01745788667687596*k + 0.01225114854517611*n >= 0)  &&  (1 + 0.888669733959771*i + 0.2222122606345349*k - 0.2221226063453505*n >= 0)  &&  (1 + 0.03736930648089738*i - 0.008929540366860701*k + 0.008976585655235956*n >= 0)  &&  (1 + 0.07261724659606657*i - 0.006051437216338881*k + 0.02723146747352496*n >= 0)  &&  (1 + 0.09708737864077668*i + 0.04854368932038834*k + 0.08737864077669902*n >= 0)  &&  (1 + 0.1342878316274433*i - 0.02396586842378504*k + 0.02399407144315899*n >= 0)  &&  (1 + 0.328732407492469*i - 0.02737090198502279*k + 0.02741783259705538*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 3 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(2 + i + 2*k - 2*n >= 0)  &&  (9 + 8*i + 2*k - 2*n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/half.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/half.inv >>> [0m(2 + i + 2*k - 2*n >= 0)  &&  (9 + 8*i + 2*k - 2*n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
