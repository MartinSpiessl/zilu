[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> linear]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target zilu_linear1
[  8%] Building CXX object CMakeFiles/zilu_linear1.dir/test/zilu_linear1.cpp.o
[ 16%] Building CXX object CMakeFiles/zilu_linear1.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/zilu_linear1.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/zilu_linear1.dir/src/color.cpp.o
[ 41%] Building CXX object CMakeFiles/zilu_linear1.dir/src/state.cpp.o
[ 50%] Building CXX object CMakeFiles/zilu_linear1.dir/src/polynomial.cpp.o
[ 58%] Building CXX object CMakeFiles/zilu_linear1.dir/src/iif.cpp.o
[ 66%] Building CXX object CMakeFiles/zilu_linear1.dir/src/config.cpp.o
[ 75%] Building CXX object CMakeFiles/zilu_linear1.dir/src/classifier.cpp.o
[ 83%] Building CXX object CMakeFiles/zilu_linear1.dir/src/poly_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/zilu_linear1.dir/src/conjunctive_learner.cpp.o
[100%] Building CXX object CMakeFiles/zilu_linear1.dir/src/instrumentation.cpp.o
Linking CXX executable zilu_linear1
[100%] Built target zilu_linear1
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[1] :::::: 0	1	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/zilu_linear1.cnt[0m
[34m[1mTest Counter Example: (0,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/zilu_linear1.cnt --> [0m+
[0m[33m>>>> Linear Learner-----------------------
[0m[31m[1][0m[#r4,#s16] -->  [160+:10-]|-->> [33m(1.37434119896578 - 0.0331683721285024*x + 0.03217217345694121*y >= 0) [0m
[31m[2][0m[#r8,#s32] -->  [172+:28-]|-->> [33m(1.771807032692685 - 0.06842260928126789*x + 0.06636993100282987*y >= 0) [0m
[31m[3][0m[#r12,#s48] -->  [220+:45-]|-->> [33m(2.636162867832297 - 0.1450194871491844*x + 0.1406669533711318*y >= 0) [0m
[31m[4][0m[#r16,#s64] -->  [302+:57-]|-->> [33m(4.692309185845261 - 0.3273323746316859*x + 0.317512403392735*y >= 0) [0m
[31m[5][0m[#r20,#s80] -->  [320+:67-]|-->> [33m(32.52477387728504 - 1.863932645700601*x + 1.890946162304942*y >= 0) [0m
[31m[6][0m[#r24,#s96] -->  [391+:78-]|-->> [33m(32.98403263204841 - 1.99900203950311*x + 1.999002039503124*y >= 0) [0m
[31m[7][0m[#r28,#s112] -->  [430+:86-]|-->> [33m(32.98412991359895 - 1.999008119599954*x + 1.999008119599943*y >= 0) [0m
--------------------------------------------------
[33m  Invariant Candidate(Linear): {  [32m(33 - 2*x + 2*y >= 0) [33m  }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/zilu_linear1.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/zilu_linear1.inv >>> [0m(33 - 2*x + 2*y >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[1m[32m-----------------------------------------------------------finish proving---------------------------------------------------------------[0m
[32mThe invariant can be [33m(33 - 2*x + 2*y >= 0) [0m

=====================time=========================
