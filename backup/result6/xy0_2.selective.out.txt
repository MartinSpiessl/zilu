[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> conjunctive]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target xy0_2
[  8%] Building CXX object CMakeFiles/xy0_2.dir/test/xy0_2.cpp.o
[ 16%] Building CXX object CMakeFiles/xy0_2.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/xy0_2.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/xy0_2.dir/src/color.cpp.o
[ 41%] Building CXX object CMakeFiles/xy0_2.dir/src/state.cpp.o
[ 50%] Building CXX object CMakeFiles/xy0_2.dir/src/polynomial.cpp.o
[ 58%] Building CXX object CMakeFiles/xy0_2.dir/src/iif.cpp.o
[ 66%] Building CXX object CMakeFiles/xy0_2.dir/src/config.cpp.o
[ 75%] Building CXX object CMakeFiles/xy0_2.dir/src/classifier.cpp.o
[ 83%] Building CXX object CMakeFiles/xy0_2.dir/src/poly_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/xy0_2.dir/src/conjunctive_learner.cpp.o
[100%] Building CXX object CMakeFiles/xy0_2.dir/src/instrumentation.cpp.o
Linking CXX executable xy0_2
[100%] Built target xy0_2
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[0][0m
[33m  2)---->[1] :::::: 0	0	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt[0m
[34m[1mTest Counter Example: (0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1][0m[#r4,#s16] -->   [1+:365-]|-->> [33m(1 + 0.02380261248185776*x + 0.02438316400580551*y >= 0)  &&  (1 - 0.01185313674472391*x - 0.007227522405319456*y >= 0)  &&  (1 - 0.02600297176820208*x - 0.008172362555720653*y >= 0)  &&  (1 - 0.04807692307692308*x + 0.009615384615384616*y >= 0)  &&  (1 - 0.01865136298421808*x + 0.05021520803443329*y >= 0) 
[0m[31m[2][0m[#r8,#s32] -->   [1+:921-]|-->> [33m(1 + 0.05549132947976879*x + 0.03930635838150289*y >= 0)  &&  (1 - 0.01185313674472391*x - 0.007227522405319456*y >= 0)  &&  (1 - 0.02600297176820208*x - 0.008172362555720653*y >= 0)  &&  (1 - 0.04807692307692308*x + 0.009615384615384616*y >= 0)  &&  (1 - 0.01865136298421808*x + 0.05021520803443329*y >= 0) 
[0m[31m[3][0m[#r12,#s48] -->   [1+:2311-]|-->> [33m(1 - 0.07302231237322515*x + 0.05273833671399594*y >= 0)  &&  (1 - 0.01185313674472391*x - 0.007227522405319456*y >= 0)  &&  (1 - 0.02600297176820208*x - 0.008172362555720653*y >= 0)  &&  (1 - 0.04807692307692308*x + 0.009615384615384616*y >= 0)  &&  (1 - 0.01865136298421808*x + 0.05021520803443329*y >= 0)  &&  (1 + 0.05549132947976879*x + 0.03930635838150289*y >= 0) 
[0m[31m[4][0m[#r16,#s64] -->   [1+:2771-]|-->> [33m(1 - 0.1176470588235294*x + 0.4705882352941176*y >= 0)  &&  (1 - 0.4705882352941176*x + 0.1176470588235294*y >= 0)  &&  (1 - 0.2641509433962264*x - 0.07547169811320754*y >= 0)  &&  (1 - 0.111587982832618*x - 0.06866952789699571*y >= 0)  &&  (1 - 0.0512273212379936*x - 0.04055496264674494*y >= 0)  &&  (1 + 0.05549132947976879*x + 0.03930635838150289*y >= 0) 
[0m[31m[5][0m[#r20,#s80] -->   [1+:4373-]|-->> [33m(1 + 0.4*x + 0.8*y >= 0)  &&  (1 - 0.1176470588235294*x + 0.4705882352941176*y >= 0)  &&  (1 - 0.4705882352941176*x + 0.1176470588235294*y >= 0)  &&  (1 - 0.2641509433962264*x - 0.07547169811320754*y >= 0)  &&  (1 - 0.111587982832618*x - 0.06866952789699571*y >= 0)  &&  (1 + 0.05549132947976879*x + 0.03930635838150289*y >= 0)  &&  (1 - 0.0512273212379936*x - 0.04055496264674494*y >= 0) 
[0m[31m[6][0m[#r24,#s96] -->   [1+:5073-]|-->> [33m(1 - x + y >= 0)  &&  (1 + 0.4*x + 0.8*y >= 0)  &&  (1 - 0.4705882352941176*x + 0.1176470588235294*y >= 0)  &&  (1 - 0.2641509433962264*x - 0.07547169811320754*y >= 0)  &&  (1 - 0.111587982832618*x - 0.06866952789699571*y >= 0)  &&  (1 + 0.05549132947976879*x + 0.03930635838150289*y >= 0)  &&  (1 - 0.0512273212379936*x - 0.04055496264674494*y >= 0) 
[0m[31m[7][0m[#r28,#s112] -->   [1+:6112-]|-->> [33m(1 + 2*y >= 0)  &&  (1 - 2*x >= 0)  &&  (1 - 0.8*x - 0.4*y >= 0)  &&  (1 + 0.4*x + 0.8*y >= 0)  &&  (1 - 0.0512273212379936*x - 0.04055496264674494*y >= 0)  &&  (1 + 0.05549132947976879*x + 0.03930635838150289*y >= 0) 
[0m[31m[8][0m[#r32,#s128] -->   [1+:6730-]|-->> [33m(1 + 2*y >= 0)  &&  (1 - 2*x >= 0)  &&  (1 - 0.8*x - 0.4*y >= 0)  &&  (1 + 0.4*x + 0.8*y >= 0)  &&  (1 - 0.0512273212379936*x - 0.04055496264674494*y >= 0)  &&  (1 + 0.05549132947976879*x + 0.03930635838150289*y >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 8 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 + 2*y >= 0)  &&  (1 - 2*x >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.inv >>> [0m(1 + 2*y >= 0)  &&  (1 - 2*x >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty III (invariant && ~loopcondition ==> postcondition) FAILS.
[0m
[32m[1m--------------------------------------------- Iteration 2 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt[0m
[34m[1mTest Counter Example: (1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt --> [0m+
[0m[34m[1mTest Counter Example: (2,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt --> [0m+
[0m[34m[1mTest Counter Example: (3,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt --> [0m+
[0m[34m[1mTest Counter Example: (4,4) @/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt --> [0m+
[0m[34m[1mTest Counter Example: (5,5) @/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt --> [0m+
[0m[34m[1mTest Counter Example: (6,6) @/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt --> [0m+
[0m[34m[1mTest Counter Example: (7,7) @/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt --> [0m+
[0m[34m[1mTest Counter Example: (8,8) @/home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1][0m[#r4,#s16] -->   [9+:7837-]|-->> [33m(1 - 1.999529882561568*x + 1.999462722927504*y >= 0)  &&  (17 - 2*x >= 0)  &&  (10.6 - 0.7999999999999998*x - 0.3999999999999999*y >= 0)  &&  (1 + 0.4*x + 0.7999999999999999*y >= 0)  &&  (1.702439024390244 - 0.04878048780487805*x - 0.03902439024390244*y >= 0)  &&  (1 + 0.05549132947976878*x + 0.03930635838150288*y >= 0) 
[0m[31m[2][0m[#r8,#s32] -->   [105+:9344-]|-->> [33m(1 + 0.02380261248185776*x + 0.02438316400580551*y >= 0)  &&  (1 - 1.99946172589091*x + 1.999452113853295*y >= 0)  &&  (1 + 0.4*x + 0.7999999999999999*y >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(5 + 2*x + 4*y >= 0)  &&  (1 - 2*x + 2*y >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/xy0_2.inv >>> [0m(5 + 2*x + 4*y >= 0)  &&  (1 - 2*x + 2*y >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[1m[32m-----------------------------------------------------------finish proving---------------------------------------------------------------[0m
[32mThe invariant can be [33m(5 + 2*x + 4*y >= 0)  &&  (1 - 2*x + 2*y >= 0) [0m

=====================time=========================
