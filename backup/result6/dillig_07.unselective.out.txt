[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> conjunctive]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target dillig_07
[  8%] Building CXX object CMakeFiles/dillig_07.dir/test/dillig_07.cpp.o
[ 16%] Building CXX object CMakeFiles/dillig_07.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/dillig_07.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/dillig_07.dir/src/color.cpp.o
[ 41%] Building CXX object CMakeFiles/dillig_07.dir/src/state.cpp.o
[ 50%] Building CXX object CMakeFiles/dillig_07.dir/src/polynomial.cpp.o
[ 58%] Building CXX object CMakeFiles/dillig_07.dir/src/iif.cpp.o
[ 66%] Building CXX object CMakeFiles/dillig_07.dir/src/config.cpp.o
[ 75%] Building CXX object CMakeFiles/dillig_07.dir/src/classifier.cpp.o
[ 83%] Building CXX object CMakeFiles/dillig_07.dir/src/poly_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/dillig_07.dir/src/conjunctive_learner.cpp.o
[100%] Building CXX object CMakeFiles/dillig_07.dir/src/instrumentation.cpp.o
Linking CXX executable dillig_07
[100%] Built target dillig_07
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[0][0m
[33m  2)---->[1] :::::: 0	0	0	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt[0m
[34m[1mTest Counter Example: (0,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [1+:1813-]|-->> [33m(1 + 0.01605746883583351*i + 0.004436932178322417*j + 0.01204310162687513*n >= 0)  &&  (1 + 0.008023598820058996*i + 0.003539823008849557*j - 0.008967551622418879*n >= 0)  &&  (1 + 0.003128666405944466*i - 0.0215095815408682*j - 0.01759874853343762*n >= 0)  &&  (1 + 0.008104899075938258*i + 0.0034587785865469*j + 0.005059108977337257*n >= 0)  &&  (1 - 0.01020462967935979*i - 0.009345292443203179*j + 0.004833771953380955*n >= 0)  &&  (1 + 0.005258491546669112*i - 0.006848268060778379*j + 0.006909413311321043*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [1+:3256-]|-->> [33m(1 + 0.01605746883583351*i + 0.004436932178322417*j + 0.01204310162687513*n >= 0)  &&  (1 + 0.008023598820058996*i + 0.003539823008849557*j - 0.008967551622418879*n >= 0)  &&  (1 + 0.003128666405944466*i - 0.0215095815408682*j - 0.01759874853343762*n >= 0)  &&  (1 + 0.008104899075938258*i + 0.0034587785865469*j + 0.005059108977337257*n >= 0)  &&  (1 - 0.01020462967935979*i - 0.009345292443203179*j + 0.004833771953380955*n >= 0)  &&  (1 + 0.005258491546669112*i - 0.006848268060778379*j + 0.006909413311321043*n >= 0) 
[0m[31m[3Pure Random][0m[#r90,#s0] -->   [1+:4699-]|-->> [33m(1 + 0.02831350020517029*i - 0.003282724661469019*j - 0.002872384078785392*n >= 0)  &&  (1 + 0.008023598820058996*i + 0.003539823008849557*j - 0.008967551622418879*n >= 0)  &&  (1 + 0.003128666405944466*i - 0.0215095815408682*j - 0.01759874853343762*n >= 0)  &&  (1 + 0.008104899075938258*i + 0.0034587785865469*j + 0.005059108977337257*n >= 0)  &&  (1 - 0.01020462967935979*i - 0.009345292443203179*j + 0.004833771953380955*n >= 0)  &&  (1 + 0.005258491546669112*i - 0.006848268060778379*j + 0.006909413311321043*n >= 0)  &&  (1 + 0.01605746883583351*i + 0.004436932178322417*j + 0.01204310162687513*n >= 0) 
[0m[31m[4Pure Random][0m[#r120,#s0] -->   [1+:5480-]|-->> [33m(1 + 0.02831350020517029*i - 0.003282724661469019*j - 0.002872384078785392*n >= 0)  &&  (1 + 0.008023598820058996*i + 0.003539823008849557*j - 0.008967551622418879*n >= 0)  &&  (1 + 0.003128666405944466*i - 0.0215095815408682*j - 0.01759874853343762*n >= 0)  &&  (1 + 0.008104899075938258*i + 0.0034587785865469*j + 0.005059108977337257*n >= 0)  &&  (1 - 0.01020462967935979*i - 0.009345292443203179*j + 0.004833771953380955*n >= 0)  &&  (1 + 0.005258491546669112*i - 0.006848268060778379*j + 0.006909413311321043*n >= 0)  &&  (1 + 0.01605746883583351*i + 0.004436932178322417*j + 0.01204310162687513*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 4 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(35 + i >= 0)  &&  (249 + 4*i + 3*n >= 0)  &&  (511 - 11*j - 9*n >= 0)  &&  (98 - i >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.inv >>> [0m(35 + i >= 0)  &&  (249 + 4*i + 3*n >= 0)  &&  (511 - 11*j - 9*n >= 0)  &&  (98 - i >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty II (invariant && loopcondition =S=> invariant) FAILS.
[0m
[32m[1m--------------------------------------------- Iteration 2 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt[0m
[34m[1mTest Counter Example: (0,0,57) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,0,58) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,0,59) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,0,60) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,0,61) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,0,62) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,0,63) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,0,64) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [493+:6808-]|-->> [33m(1 - 0.007979264767129362*i - 0.006685329940027303*j + 0.01466459470715666*n >= 0)  &&  (1.42869582691406 + 0.01366467948288566*i + 0.006028535065978968*j - 0.006698372295532187*n >= 0)  &&  (2.245863344364415 + 0.01985594705080787*i - 0.002335993770683278*j - 0.01946661475569398*n >= 0)  &&  (2.551969643408726 + 0.01382706587885936*i - 0.01381739339435857*j - 0.02424952567826135*n >= 0)  &&  (1 + 0.03174783195987915*i - 0.0317476578346396*j - 6.051610502190441e-06*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [493+:7634-]|-->> [33m(1 - 0.007979264767129362*i - 0.006685329940027303*j + 0.01466459470715666*n >= 0)  &&  (1.42869582691406 + 0.01366467948288566*i + 0.006028535065978968*j - 0.006698372295532187*n >= 0)  &&  (2.245863344364415 + 0.01985594705080787*i - 0.002335993770683278*j - 0.01946661475569398*n >= 0)  &&  (2.551969643408726 + 0.01382706587885936*i - 0.01381739339435857*j - 0.02424952567826135*n >= 0)  &&  (1 + 0.03174783195987915*i - 0.0317476578346396*j - 6.051610502190441e-06*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(68 + n >= 0)  &&  (63 + 2*i - 2*j >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.inv >>> [0m(68 + n >= 0)  &&  (63 + 2*i - 2*j >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 3 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt[0m
[34m[1mTest Counter Example: (0,1,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,0,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-1,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,-2,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,-3,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-4,2,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,-5,-6) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-7,-6,-7) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [493+:9545-]|-->> [33m(1 - 0.07692307692307693*i + 0.2307692307692308*j + 0.3076923076923077*n >= 0)  &&  (1.42869582691406 + 0.01366467948288566*i + 0.006028535065978968*j - 0.006698372295532187*n >= 0)  &&  (2.245863344364415 + 0.01985594705080787*i - 0.002335993770683278*j - 0.01946661475569398*n >= 0)  &&  (2.551969643408726 + 0.01382706587885936*i - 0.01381739339435857*j - 0.02424952567826135*n >= 0)  &&  (1 + 0.03174783195987915*i - 0.0317476578346396*j - 6.051610502190441e-06*n >= 0)  &&  (1 - 0.007979264767129362*i - 0.006685329940027303*j + 0.01466459470715666*n >= 0)  &&  (1 + 0.9996097101102592*i - 1.999207030065288*j + 0.9996097101102592*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [493+:10959-]|-->> [33m(1 - 0.07692307692307693*i + 0.2307692307692308*j + 0.3076923076923077*n >= 0)  &&  (1.42869582691406 + 0.01366467948288566*i + 0.006028535065978968*j - 0.006698372295532187*n >= 0)  &&  (2.245863344364415 + 0.01985594705080787*i - 0.002335993770683278*j - 0.01946661475569398*n >= 0)  &&  (2.551969643408726 + 0.01382706587885936*i - 0.01381739339435857*j - 0.02424952567826135*n >= 0)  &&  (1 + 0.03174783195987915*i - 0.0317476578346396*j - 6.051610502190441e-06*n >= 0)  &&  (1 - 0.007979264767129362*i - 0.006685329940027303*j + 0.01466459470715666*n >= 0)  &&  (1 + 0.9996097101102592*i - 1.999207030065288*j + 0.9996097101102592*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(13 - i + 3*j + 4*n >= 0)  &&  (1 + i - 2*j + n >= 0)  &&  (63 + 2*i - 2*j >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.inv >>> [0m(13 - i + 3*j + 4*n >= 0)  &&  (1 + i - 2*j + n >= 0)  &&  (63 + 2*i - 2*j >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty II (invariant && loopcondition =S=> invariant) FAILS.
[0m
[32m[1m--------------------------------------------- Iteration 4 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt[0m
[34m[1mTest Counter Example: (0,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-1,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,2,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,-2,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-8,-3,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-12,-4,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-13,-5,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [493+:12842-]|-->> [33m(1 + 1.999988559482389*i - 1.999977642929025*j - 1.073495784620349e-05*n >= 0)  &&  (1.42869582691406 + 0.01366467948288566*i + 0.006028535065978968*j - 0.006698372295532187*n >= 0)  &&  (2.245863344364415 + 0.01985594705080787*i - 0.002335993770683278*j - 0.01946661475569398*n >= 0)  &&  (2.551969643408726 + 0.01382706587885936*i - 0.01381739339435857*j - 0.02424952567826135*n >= 0)  &&  (1 - 0.07692307692307693*i + 0.2307692307692308*j + 0.3076923076923077*n >= 0)  &&  (1 - 0.007979264767129362*i - 0.006685329940027303*j + 0.01466459470715666*n >= 0)  &&  (1 + 0.9996097101102592*i - 1.999207030065288*j + 0.9996097101102592*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [493+:14042-]|-->> [33m(1 + 1.999988559482389*i - 1.999977642929025*j - 1.073495784620349e-05*n >= 0)  &&  (1.42869582691406 + 0.01366467948288566*i + 0.006028535065978968*j - 0.006698372295532187*n >= 0)  &&  (2.245863344364415 + 0.01985594705080787*i - 0.002335993770683278*j - 0.01946661475569398*n >= 0)  &&  (2.551969643408726 + 0.01382706587885936*i - 0.01381739339435857*j - 0.02424952567826135*n >= 0)  &&  (1 - 0.07692307692307693*i + 0.2307692307692308*j + 0.3076923076923077*n >= 0)  &&  (1 - 0.007979264767129362*i - 0.006685329940027303*j + 0.01466459470715666*n >= 0)  &&  (1 + 0.9996097101102592*i - 1.999207030065288*j + 0.9996097101102592*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 + 2*i - 2*j >= 0)  &&  (68 + n >= 0)  &&  (13 - i + 3*j + 4*n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.inv >>> [0m(1 + 2*i - 2*j >= 0)  &&  (68 + n >= 0)  &&  (13 - i + 3*j + 4*n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 5 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt[0m
[34m[1mTest Counter Example: (1,1,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,0,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,-1,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,-1,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (2,-1,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,1,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (2,2,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,0,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [493+:15183-]|-->> [33m(1 - 0.9996273988176532*i - 0.9996273988176532*j + 1.999266441422255*n >= 0)  &&  (1.42869582691406 + 0.01366467948288566*i + 0.006028535065978968*j - 0.006698372295532187*n >= 0)  &&  (2.245863344364415 + 0.01985594705080787*i - 0.002335993770683278*j - 0.01946661475569398*n >= 0)  &&  (2.551969643408726 + 0.01382706587885936*i - 0.01381739339435857*j - 0.02424952567826135*n >= 0)  &&  (1 + 1.999988559482389*i - 1.999977642929025*j - 1.073495784620349e-05*n >= 0)  &&  (1 - 0.007979264767129362*i - 0.006685329940027303*j + 0.01466459470715666*n >= 0)  &&  (1 + 0.9996097101102592*i - 1.999207030065288*j + 0.9996097101102592*n >= 0)  &&  (1 - 0.07692307692307693*i + 0.2307692307692308*j + 0.3076923076923077*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [493+:16804-]|-->> [33m(1 - 0.9996273988176532*i - 0.9996273988176532*j + 1.999266441422255*n >= 0)  &&  (1.42869582691406 + 0.01366467948288566*i + 0.006028535065978968*j - 0.006698372295532187*n >= 0)  &&  (2.245863344364415 + 0.01985594705080787*i - 0.002335993770683278*j - 0.01946661475569398*n >= 0)  &&  (2.551969643408726 + 0.01382706587885936*i - 0.01381739339435857*j - 0.02424952567826135*n >= 0)  &&  (1 + 1.999988559482389*i - 1.999977642929025*j - 1.073495784620349e-05*n >= 0)  &&  (1 - 0.007979264767129362*i - 0.006685329940027303*j + 0.01466459470715666*n >= 0)  &&  (1 + 0.9996097101102592*i - 1.999207030065288*j + 0.9996097101102592*n >= 0)  &&  (1 - 0.07692307692307693*i + 0.2307692307692308*j + 0.3076923076923077*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 - i - j + 2*n >= 0)  &&  (1 + 2*i - 2*j >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/dillig_07.inv >>> [0m(1 - i - j + 2*n >= 0)  &&  (1 + 2*i - 2*j >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[1m[32m-----------------------------------------------------------finish proving---------------------------------------------------------------[0m
[32mThe invariant can be [33m(1 - i - j + 2*n >= 0)  &&  (1 + 2*i - 2*j >= 0) [0m

=====================time=========================
