[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> conjunctive]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target down_true_1
[  8%] Building CXX object CMakeFiles/down_true_1.dir/test/down_true_1.cpp.o
[ 16%] Building CXX object CMakeFiles/down_true_1.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/down_true_1.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/down_true_1.dir/src/state.cpp.o
[ 41%] Building CXX object CMakeFiles/down_true_1.dir/src/polynomial.cpp.o
[ 50%] Building CXX object CMakeFiles/down_true_1.dir/src/iif.cpp.o
[ 58%] Building CXX object CMakeFiles/down_true_1.dir/src/config.cpp.o
[ 66%] Building CXX object CMakeFiles/down_true_1.dir/src/classifier.cpp.o
[ 75%] Building CXX object CMakeFiles/down_true_1.dir/src/poly_learner.cpp.o
[ 83%] Building CXX object CMakeFiles/down_true_1.dir/src/conjunctive_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/down_true_1.dir/src/instrumentation.cpp.o
Linking CXX executable down_true_1
[100%] Built target down_true_1
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[0][0m
[33m  2)---->[1] :::::: 0	0	1	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[34m[1mTest Counter Example: (0,0,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:2550-]|-->> [33m(1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0)  &&  (0.9953918791312559 - 0.0008309726156751653*i - 0.005514636449480643*k + 0.01095372993389991*n >= 0)  &&  (1.011523470598204 + 0.01796305710896458*i + 0.0149127266564989*k - 0.01152347059820369*n >= 0)  &&  (1.020291133656815 + 0.0006616674018526688*i - 0.01102779003087781*k - 0.009925011027790032*n >= 0)  &&  (1.012791991101224 + 0.001668520578420467*i + 0.01056729699666296*k - 0.01279199110122358*n >= 0)  &&  (1.025056603773585 - 0.01041509433962264*i - 0.0007547169811320754*k - 0.01388679245283019*n >= 0)  &&  (0.9992054032578466 + 0.01462058005562177*i - 0.01017083829956297*k + 0.0007945967421533572*n >= 0)  &&  (0.992650715588219 - 0.000165773332596563*i + 0.007515057744377522*k + 0.007349284411780958*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:4522-]|-->> [33m(1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (0.9953918791312559 - 0.0008309726156751653*i - 0.005514636449480643*k + 0.01095372993389991*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0)  &&  (1.020291133656815 + 0.0006616674018526688*i - 0.01102779003087781*k - 0.009925011027790032*n >= 0)  &&  (1.012791991101224 + 0.001668520578420467*i + 0.01056729699666296*k - 0.01279199110122358*n >= 0)  &&  (1.025056603773585 - 0.01041509433962264*i - 0.0007547169811320754*k - 0.01388679245283019*n >= 0)  &&  (0.9992054032578466 + 0.01462058005562177*i - 0.01017083829956297*k + 0.0007945967421533572*n >= 0)  &&  (0.992650715588219 - 0.000165773332596563*i + 0.007515057744377522*k + 0.007349284411780958*n >= 0)  &&  (1.011523470598204 + 0.01796305710896458*i + 0.0149127266564989*k - 0.01152347059820369*n >= 0) 
[0m[31m[3Pure Random][0m[#r90,#s0] -->   [2+:6018-]|-->> [33m(1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (0.9953918791312559 - 0.0008309726156751653*i - 0.005514636449480643*k + 0.01095372993389991*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0)  &&  (1.020291133656815 + 0.0006616674018526688*i - 0.01102779003087781*k - 0.009925011027790032*n >= 0)  &&  (1.012791991101224 + 0.001668520578420467*i + 0.01056729699666296*k - 0.01279199110122358*n >= 0)  &&  (1.025056603773585 - 0.01041509433962264*i - 0.0007547169811320754*k - 0.01388679245283019*n >= 0)  &&  (0.9992054032578466 + 0.01462058005562177*i - 0.01017083829956297*k + 0.0007945967421533572*n >= 0)  &&  (0.992650715588219 - 0.000165773332596563*i + 0.007515057744377522*k + 0.007349284411780958*n >= 0)  &&  (1.011523470598204 + 0.01796305710896458*i + 0.0149127266564989*k - 0.01152347059820369*n >= 0) 
[0m[31m[4Pure Random][0m[#r120,#s0] -->   [2+:8454-]|-->> [33m(1.006351859590472 - 0.01203510238194735*i + 0.001086502298370247*k + 0.004596740493104889*n >= 0)  &&  (1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (0.9953918791312559 - 0.0008309726156751653*i - 0.005514636449480643*k + 0.01095372993389991*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.020291133656815 + 0.0006616674018526688*i - 0.01102779003087781*k - 0.009925011027790032*n >= 0)  &&  (1.012791991101224 + 0.001668520578420467*i + 0.01056729699666296*k - 0.01279199110122358*n >= 0)  &&  (1.025056603773585 - 0.01041509433962264*i - 0.0007547169811320754*k - 0.01388679245283019*n >= 0)  &&  (0.9992054032578466 + 0.01462058005562177*i - 0.01017083829956297*k + 0.0007945967421533572*n >= 0)  &&  (0.992650715588219 - 0.000165773332596563*i + 0.007515057744377522*k + 0.007349284411780958*n >= 0)  &&  (1.011523470598204 + 0.01796305710896458*i + 0.0149127266564989*k - 0.01152347059820369*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0) 
[0m[31m[5Pure Random][0m[#r150,#s0] -->   [2+:10434-]|-->> [33m(1.002834199338687 - 0.03212092583845064*i + 0.02928672649976382*k >= 0)  &&  (0.9791268557989122 + 0.002645891518447744*i + 0.01205350580626194*k + 0.02087314420108776*n >= 0)  &&  (0.9953918791312559 - 0.0008309726156751653*i - 0.005514636449480643*k + 0.01095372993389991*n >= 0)  &&  (1.006351859590472 - 0.01203510238194735*i + 0.001086502298370247*k + 0.004596740493104889*n >= 0)  &&  (1.020291133656815 + 0.0006616674018526688*i - 0.01102779003087781*k - 0.009925011027790032*n >= 0)  &&  (1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (0.9992054032578466 + 0.01462058005562177*i - 0.01017083829956297*k + 0.0007945967421533572*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0)  &&  (1.011523470598204 + 0.01796305710896458*i + 0.0149127266564989*k - 0.01152347059820369*n >= 0) 
[0m[31m[6Pure Random][0m[#r180,#s0] -->   [2+:13124-]|-->> [33m(1.002834199338687 - 0.03212092583845064*i + 0.02928672649976382*k >= 0)  &&  (0.9791268557989122 + 0.002645891518447744*i + 0.01205350580626194*k + 0.02087314420108776*n >= 0)  &&  (0.9953918791312559 - 0.0008309726156751653*i - 0.005514636449480643*k + 0.01095372993389991*n >= 0)  &&  (1.006351859590472 - 0.01203510238194735*i + 0.001086502298370247*k + 0.004596740493104889*n >= 0)  &&  (1.020291133656815 + 0.0006616674018526688*i - 0.01102779003087781*k - 0.009925011027790032*n >= 0)  &&  (1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (0.9992054032578466 + 0.01462058005562177*i - 0.01017083829956297*k + 0.0007945967421533572*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0)  &&  (1.011523470598204 + 0.01796305710896458*i + 0.0149127266564989*k - 0.01152347059820369*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 6 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.inv >>> [0m(1 >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 2 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[34m[1mTest Counter Example: (0,1,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,0,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-1,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,-2,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-4,-3,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-5,-4,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-6,-5,-6) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-7,-6,-7) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:15245-]|-->> [33m( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.002834199338687 - 0.03212092583845064*i + 0.02928672649976382*k >= 0)  &&  (0.9791268557989122 + 0.002645891518447744*i + 0.01205350580626194*k + 0.02087314420108776*n >= 0)  &&  (1.006351859590472 - 0.01203510238194735*i + 0.001086502298370247*k + 0.004596740493104889*n >= 0)  &&  (1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0)  &&  (1.011523470598204 + 0.01796305710896458*i + 0.0149127266564989*k - 0.01152347059820369*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:17126-]|-->> [33m( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.002834199338687 - 0.03212092583845064*i + 0.02928672649976382*k >= 0)  &&  (0.9791268557989122 + 0.002645891518447744*i + 0.01205350580626194*k + 0.02087314420108776*n >= 0)  &&  (1.006351859590472 - 0.01203510238194735*i + 0.001086502298370247*k + 0.004596740493104889*n >= 0)  &&  (1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0)  &&  (1.011523470598204 + 0.01796305710896458*i + 0.0149127266564989*k - 0.01152347059820369*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m( -1 + 2*i - 2*k + 4*n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.inv >>> [0m( -1 + 2*i - 2*k + 4*n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 3 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[34m[1mTest Counter Example: (0,-1,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,-4,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-7,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,-10,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,-11,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (5,-6,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,-13,-6) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-4,-19,-7) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:19353-]|-->> [33m(k + n >= 0)  &&  ( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.002834199338687 - 0.03212092583845064*i + 0.02928672649976382*k >= 0)  &&  (1.006351859590472 - 0.01203510238194735*i + 0.001086502298370247*k + 0.004596740493104889*n >= 0)  &&  (1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:21204-]|-->> [33m(k + n >= 0)  &&  ( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.002834199338687 - 0.03212092583845064*i + 0.02928672649976382*k >= 0)  &&  (1.006351859590472 - 0.01203510238194735*i + 0.001086502298370247*k + 0.004596740493104889*n >= 0)  &&  (1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(k + n >= 0)  &&  ( -1 + 2*i - 2*k + 4*n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.inv >>> [0m(k + n >= 0)  &&  ( -1 + 2*i - 2*k + 4*n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 4 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[34m[1mTest Counter Example: (1,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (4,1,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (2,-1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (3,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (2,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (4,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (5,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,0,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:22870-]|-->> [33m(1 - 2*i + 2*k >= 0)  &&  ( -0.3330078125 - 0.666015625*i + 0.6669921875*k + 1.3330078125*n >= 0)  &&  (k + n >= 0)  &&  ( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:24618-]|-->> [33m(1 - 2*i + 2*k >= 0)  &&  ( -0.3330078125 - 0.666015625*i + 0.6669921875*k + 1.3330078125*n >= 0)  &&  (k + n >= 0)  &&  ( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 - 2*i + 2*k >= 0)  &&  ( -1 + 2*i - 2*k + 4*n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.inv >>> [0m(1 - 2*i + 2*k >= 0)  &&  ( -1 + 2*i - 2*k + 4*n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 5 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[34m[1mTest Counter Example: (1,2,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (2,5,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (2,3,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (3,4,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (2,3,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (2,4,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (3,6,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (4,5,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:26282-]|-->> [33m(3 - 2*k >= 0)  &&  (1 - 2*i + 2*k >= 0)  &&  ( -0.3330078125 - 0.666015625*i + 0.6669921875*k + 1.3330078125*n >= 0)  &&  (k + n >= 0)  &&  ( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:28254-]|-->> [33m(3 - 2*k >= 0)  &&  (1 - 2*i + 2*k >= 0)  &&  ( -0.3330078125 - 0.666015625*i + 0.6669921875*k + 1.3330078125*n >= 0)  &&  (k + n >= 0)  &&  ( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.01850138760407 + 0.05550416281221091*i - 0.01665124884366328*k - 0.01850138760407031*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(3 - 2*k >= 0)  &&  (1 - 2*i + 2*k >= 0)  &&  ( -1 + 2*i - 2*k + 4*n >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.inv >>> [0m(3 - 2*k >= 0)  &&  (1 - 2*i + 2*k >= 0)  &&  ( -1 + 2*i - 2*k + 4*n >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 6 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[34m[1mTest Counter Example: (0,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,1,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,1,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,1,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,1,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,1,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m?
[0m[34m[1mTest Counter Example: (-3,1,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,1,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:30060-]|-->> [33m(1 + 2*i - 2*k >= 0)  &&  (3 - 2*k >= 0)  &&  (1 - 2*i + 2*k >= 0)  &&  ( -0.3330078125 - 0.666015625*i + 0.6669921875*k + 1.3330078125*n >= 0)  &&  (k + n >= 0)  &&  ( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:32727-]|-->> [33m(1 + 2*i - 2*k >= 0)  &&  (3 - 2*k >= 0)  &&  (1 - 2*i + 2*k >= 0)  &&  ( -0.3330078125 - 0.666015625*i + 0.6669921875*k + 1.3330078125*n >= 0)  &&  (k + n >= 0)  &&  ( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 + 2*i - 2*k >= 0)  &&  ( -1 - 2*i + 2*k + 4*n >= 0)  &&  (1 - 2*i + 2*k >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.inv >>> [0m(1 + 2*i - 2*k >= 0)  &&  ( -1 - 2*i + 2*k + 4*n >= 0)  &&  (1 - 2*i + 2*k >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty III (invariant && ~loopcondition ==> postcondition) FAILS.
[0m
[32m[1m--------------------------------------------- Iteration 7 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt[0m
[34m[1mTest Counter Example: (2,2,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (3,3,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (4,4,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (5,5,4) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (3,3,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (4,4,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (4,4,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (6,6,3) @/home/lijiaying/Research/GitHub/ZILU/tmp/down_true_1.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:34616-]|-->> [33m(1 + 2*i - 2*k >= 0)  &&  (3 - 2*k >= 0)  &&  (1 - 2*i + 2*k >= 0)  &&  ( -0.3330078125 - 0.666015625*i + 0.6669921875*k + 1.3330078125*n >= 0)  &&  (k + n >= 0)  &&  ( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:36417-]|-->> [33m(1 + 2*i - 2*k >= 0)  &&  (3 - 2*k >= 0)  &&  (1 - 2*i + 2*k >= 0)  &&  ( -0.3330078125 - 0.666015625*i + 0.6669921875*k + 1.3330078125*n >= 0)  &&  (k + n >= 0)  &&  ( -0.3330078125 + 0.6669921875*i - 0.666015625*k + 1.3330078125*n >= 0)  &&  (1.074866310160428 - 0.004583651642475171*i - 0.01833460656990069*k - 0.05194805194805194*n >= 0)  &&  (1.037589828634605 + 0.02432283029297955*i + 0.01437258153676064*k - 0.03758982863460475*n >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 + 2*i - 2*k >= 0)  &&  (3 - 2*k >= 0)  &&  (1 - 2*i + 2*k >= 0)  &&  (k + n >= 0) [33m }[0m
