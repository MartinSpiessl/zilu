[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> conjunctive]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target cggmp2005_variant_true
[  8%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/test/cggmp2005_variant_true.cpp.o
[ 16%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/color.cpp.o
[ 41%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/state.cpp.o
[ 50%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/polynomial.cpp.o
[ 58%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/iif.cpp.o
[ 66%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/config.cpp.o
[ 75%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/classifier.cpp.o
[ 83%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/poly_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/conjunctive_learner.cpp.o
[100%] Building CXX object CMakeFiles/cggmp2005_variant_true.dir/src/instrumentation.cpp.o
Linking CXX executable cggmp2005_variant_true
[100%] Built target cggmp2005_variant_true
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[0][0m
[33m  2)---->[1] :::::: 0	1	2	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[34m[1mTest Counter Example: (0,1,2) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:1371-]|-->> [33m(0.9908012265031328 - 0.005332622317024397*low + 0.005199306759098786*mid + 0.01453139581389148*high >= 0)  &&  (0.9322512350035286 + 0.04093154551870148*low + 0.03387438249823571*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0)  &&  (1.004376701697244 - 0.005954349983460139*low - 0.007990025191480699*mid + 0.001577648286215934*high >= 0)  &&  (1.021191813077341 + 0.01521463502988589*low - 0.009961963412425286*mid - 0.005614924832457889*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0)  &&  (1.001377220768489 + 0.001652664922187027*low - 0.02120919983473351*mid + 0.009915989533122161*high >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:2994-]|-->> [33m(0.9908012265031328 - 0.005332622317024397*low + 0.005199306759098786*mid + 0.01453139581389148*high >= 0)  &&  (0.9322512350035286 + 0.04093154551870148*low + 0.03387438249823571*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0)  &&  (1.004376701697244 - 0.005954349983460139*low - 0.007990025191480699*mid + 0.001577648286215934*high >= 0)  &&  (1.021191813077341 + 0.01521463502988589*low - 0.009961963412425286*mid - 0.005614924832457889*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0)  &&  (1.001377220768489 + 0.001652664922187027*low - 0.02120919983473351*mid + 0.009915989533122161*high >= 0) 
[0m[31m[3Pure Random][0m[#r90,#s0] -->   [2+:4874-]|-->> [33m(0.9908012265031328 - 0.005332622317024397*low + 0.005199306759098786*mid + 0.01453139581389148*high >= 0)  &&  (0.9322512350035286 + 0.04093154551870148*low + 0.03387438249823571*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0)  &&  (1.004376701697244 - 0.005954349983460139*low - 0.007990025191480699*mid + 0.001577648286215934*high >= 0)  &&  (1.021191813077341 + 0.01521463502988589*low - 0.009961963412425286*mid - 0.005614924832457889*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0)  &&  (1.001377220768489 + 0.001652664922187027*low - 0.02120919983473351*mid + 0.009915989533122161*high >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 3 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.inv >>> [0m(1 >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 2 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[34m[1mTest Counter Example: (1,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-1,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,-2,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-4,-3,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-5,-4,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-6,-5,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-7,-6,-6) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-8,-7,-7) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:5940-]|-->> [33m(1.021228883241142 - 0.01793990133054268*low - 0.01644490955299746*mid - 0.002391986844072358*high >= 0)  &&  ( -1 + 2*high >= 0)  &&  (0.9322512350035286 + 0.04093154551870148*low + 0.03387438249823571*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0)  &&  (1.021191813077341 + 0.01521463502988589*low - 0.009961963412425286*mid - 0.005614924832457889*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0)  &&  (1.001377220768489 + 0.001652664922187027*low - 0.02120919983473351*mid + 0.009915989533122161*high >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:7255-]|-->> [33m(1.021228883241142 - 0.01793990133054268*low - 0.01644490955299746*mid - 0.002391986844072358*high >= 0)  &&  ( -1 + 2*high >= 0)  &&  (0.9322512350035286 + 0.04093154551870148*low + 0.03387438249823571*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0)  &&  (1.021191813077341 + 0.01521463502988589*low - 0.009961963412425286*mid - 0.005614924832457889*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0)  &&  (1.001377220768489 + 0.001652664922187027*low - 0.02120919983473351*mid + 0.009915989533122161*high >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m( -1 + 2*high >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.inv >>> [0m( -1 + 2*high >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 3 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[34m[1mTest Counter Example: (26,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (26,2,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (27,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,3,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-4,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:8995-]|-->> [33m( -2 + low - mid + 2*high >= 0)  &&  (1.079872204472843 - 0.07987220447284345*low - 0.003194888178913738*mid >= 0)  &&  (1.021228883241142 - 0.01793990133054268*low - 0.01644490955299746*mid - 0.002391986844072358*high >= 0)  &&  ( -1 + 2*high >= 0)  &&  (0.9322512350035286 + 0.04093154551870148*low + 0.03387438249823571*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0)  &&  (1.021191813077341 + 0.01521463502988589*low - 0.009961963412425286*mid - 0.005614924832457889*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:10622-]|-->> [33m( -2 + low - mid + 2*high >= 0)  &&  (1.079872204472843 - 0.07987220447284345*low - 0.003194888178913738*mid >= 0)  &&  (1.021228883241142 - 0.01793990133054268*low - 0.01644490955299746*mid - 0.002391986844072358*high >= 0)  &&  ( -1 + 2*high >= 0)  &&  (0.9322512350035286 + 0.04093154551870148*low + 0.03387438249823571*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0)  &&  (1.021191813077341 + 0.01521463502988589*low - 0.009961963412425286*mid - 0.005614924832457889*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m( -2 + low - mid + 2*high >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.inv >>> [0m( -2 + low - mid + 2*high >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 4 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[34m[1mTest Counter Example: (2,0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (1,-3,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,-6,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-1,-9,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-12,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-6,-18,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-7,-25,-8) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-8,-28,-9) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:12478-]|-->> [33m(0.9693160708260075 + 0.03555863391763014*low + 0.04042765553128384*mid - 0.004871863178645647*high >= 0)  &&  ( -2 + low - mid + 2*high >= 0)  &&  (1.079872204472843 - 0.07987220447284345*low - 0.003194888178913738*mid >= 0)  &&  (1.021228883241142 - 0.01793990133054268*low - 0.01644490955299746*mid - 0.002391986844072358*high >= 0)  &&  ( -1 + 2*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0)  &&  (1.021191813077341 + 0.01521463502988589*low - 0.009961963412425286*mid - 0.005614924832457889*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:14427-]|-->> [33m(1.057469274710057 + 0.005539207200969361*low - 0.01246321620218106*mid - 0.02250302925393803*high >= 0)  &&  (0.9693160708260075 + 0.03555863391763014*low + 0.04042765553128384*mid - 0.004871863178645647*high >= 0)  &&  ( -2 + low - mid + 2*high >= 0)  &&  (1.079872204472843 - 0.07987220447284345*low - 0.003194888178913738*mid >= 0)  &&  (1.021228883241142 - 0.01793990133054268*low - 0.01644490955299746*mid - 0.002391986844072358*high >= 0)  &&  ( -1 + 2*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0) 
[0m[31m[3Pure Random][0m[#r90,#s0] -->   [2+:16109-]|-->> [33m(1.167006109979633 - 0.04480651731160896*low - 0.01221995926680244*mid - 0.07739307535641547*high >= 0)  &&  (1.119682768565249 + 0.00432588320115357*low - 0.02451333813987023*mid - 0.04758471521268927*high >= 0)  &&  (0.9693160708260075 + 0.03555863391763014*low + 0.04042765553128384*mid - 0.004871863178645647*high >= 0)  &&  ( -2 + low - mid + 2*high >= 0)  &&  (1.079872204472843 - 0.07987220447284345*low - 0.003194888178913738*mid >= 0)  &&  ( -1 + 2*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0) 
[0m[31m[4Pure Random][0m[#r120,#s0] -->   [2+:17379-]|-->> [33m(1.167006109979633 - 0.04480651731160896*low - 0.01221995926680244*mid - 0.07739307535641547*high >= 0)  &&  (1.119682768565249 + 0.00432588320115357*low - 0.02451333813987023*mid - 0.04758471521268927*high >= 0)  &&  (0.9693160708260075 + 0.03555863391763014*low + 0.04042765553128384*mid - 0.004871863178645647*high >= 0)  &&  ( -2 + low - mid + 2*high >= 0)  &&  (1.079872204472843 - 0.07987220447284345*low - 0.003194888178913738*mid >= 0)  &&  ( -1 + 2*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 4 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m( -2 + low - mid + 2*high >= 0)  &&  ( -1 + 2*high >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.inv >>> [0m( -2 + low - mid + 2*high >= 0)  &&  ( -1 + 2*high >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty II (invariant && loopcondition =S=> invariant) FAILS.
[0m
[32m[1m--------------------------------------------- Iteration 5 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[34m[1mTest Counter Example: (1,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (2,2,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (3,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (3,3,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (2,1,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (3,2,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (4,2,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[34m[1mTest Counter Example: (4,3,1) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [2+:18995-]|-->> [33m(1 - low - 2*mid + high >= 0)  &&  (1.167006109979633 - 0.04480651731160896*low - 0.01221995926680244*mid - 0.07739307535641547*high >= 0)  &&  (1.119682768565249 + 0.00432588320115357*low - 0.02451333813987023*mid - 0.04758471521268927*high >= 0)  &&  (0.9693160708260075 + 0.03555863391763014*low + 0.04042765553128384*mid - 0.004871863178645647*high >= 0)  &&  ( -2 + low - mid + 2*high >= 0)  &&  (1.079872204472843 - 0.07987220447284345*low - 0.003194888178913738*mid >= 0)  &&  ( -1 + 2*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0)  &&  (1.011654257041114 + 0.03302039494982194*low - 0.01424409193913888*mid + 0.001294917449012625*high >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [2+:20786-]|-->> [33m(1.28 + 0.02*low - 0.14*high >= 0)  &&  (1 - low - 2*mid + high >= 0)  &&  (1.167006109979633 - 0.04480651731160896*low - 0.01221995926680244*mid - 0.07739307535641547*high >= 0)  &&  (0.9693160708260075 + 0.03555863391763014*low + 0.04042765553128384*mid - 0.004871863178645647*high >= 0)  &&  ( -2 + low - mid + 2*high >= 0)  &&  (1.079872204472843 - 0.07987220447284345*low - 0.003194888178913738*mid >= 0)  &&  ( -1 + 2*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0) 
[0m[31m[3Pure Random][0m[#r90,#s0] -->   [2+:22158-]|-->> [33m(1.28 + 0.02*low - 0.14*high >= 0)  &&  (1 - low - 2*mid + high >= 0)  &&  (1.167006109979633 - 0.04480651731160896*low - 0.01221995926680244*mid - 0.07739307535641547*high >= 0)  &&  (0.9693160708260075 + 0.03555863391763014*low + 0.04042765553128384*mid - 0.004871863178645647*high >= 0)  &&  ( -2 + low - mid + 2*high >= 0)  &&  (1.079872204472843 - 0.07987220447284345*low - 0.003194888178913738*mid >= 0)  &&  ( -1 + 2*high >= 0)  &&  (1.051498522583369 - 0.02279442802870409*low + 0.01857323765301815*mid - 0.02870409455466441*high >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 3 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(9 - high >= 0)  &&  (1 - low - 2*mid + high >= 0)  &&  ( -1 + 2*high >= 0)  &&  ( -2 + low - mid + 2*high >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.inv >>> [0m(9 - high >= 0)  &&  (1 - low - 2*mid + high >= 0)  &&  ( -1 + 2*high >= 0)  &&  ( -2 + low - mid + 2*high >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 6 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt[0m
[34m[1mTest Counter Example: (0,5,10) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,6,12) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,7,14) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,8,16) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,9,18) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,10,20) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,11,22) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m+
[0m[34m[1mTest Counter Example: (0,12,24) @/home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r30,#s0] -->   [78+:24168-]|-->> [33m(1.000059847620029 + 0.2146686683017527*low + 0.1103890598883242*mid - 0.05522445375417639*high >= 0)  &&  (1.808988764044944 + 0.1460674157303371*low - 0.03370786516853935*high >= 0)  &&  (1 - low - 2*mid + high >= 0)  &&  (6.877387108603671 - 0.2244768282123156*low + 0.04081165815643362*mid - 0.2652969586033698*high >= 0)  &&  (8.111111111111107 - 0.03703703703703705*low - 0.07407407407407407*mid - 0.2592592592592593*high >= 0)  &&  ( -2 + 1*low - mid + 2*high >= 0)  &&  (1.226415094339623 - 0.08805031446540881*low - 0.006289308176100629*mid + 0.06918238993710693*high >= 0)  &&  (1.73758865248227 - 0.0252167060677699*low + 0.03467297084318361*mid - 0.03624901497241923*high >= 0)  &&  ( -1 + 2*high >= 0) 
[0m[31m[2Pure Random][0m[#r60,#s0] -->   [78+:26058-]|-->> [33m(1.000059847620029 + 0.2146686683017527*low + 0.1103890598883242*mid - 0.05522445375417639*high >= 0)  &&  (1.808988764044944 + 0.1460674157303371*low - 0.03370786516853935*high >= 0)  &&  (1 - low - 2*mid + high >= 0)  &&  (6.877387108603671 - 0.2244768282123156*low + 0.04081165815643362*mid - 0.2652969586033698*high >= 0)  &&  (8.111111111111107 - 0.03703703703703705*low - 0.07407407407407407*mid - 0.2592592592592593*high >= 0)  &&  ( -2 + 1*low - mid + 2*high >= 0)  &&  (1.226415094339623 - 0.08805031446540881*low - 0.006289308176100629*mid + 0.06918238993710693*high >= 0)  &&  (1.73758865248227 - 0.0252167060677699*low + 0.03467297084318361*mid - 0.03624901497241923*high >= 0)  &&  ( -1 + 2*high >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(9 + 2*low + mid >= 0)  &&  ( -2 + low - mid + 2*high >= 0)  &&  (1 - low - 2*mid + high >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/cggmp2005_variant_true.inv >>> [0m(9 + 2*low + mid >= 0)  &&  ( -2 + low - mid + 2*high >= 0)  &&  (1 - low - 2*mid + high >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00002.smt2 ---> [32m[1m [unsat] [PASS][0m
  |-- processing kleeAssert00003.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
