diff --git a/.travis/klee.sh b/.travis/klee.sh
index 5ee631f..953f9fa 100755
--- a/.travis/klee.sh
+++ b/.travis/klee.sh
@@ -199,6 +199,8 @@ else
         ENABLE_SHARED=0
 fi
 
+make install
+exit 0
 ###############################################################################
 # Unit tests
 ###############################################################################
diff --git a/.travis/testing-utils.sh b/.travis/testing-utils.sh
index 153a554..bf25e23 100755
--- a/.travis/testing-utils.sh
+++ b/.travis/testing-utils.sh
@@ -17,6 +17,7 @@ if [ "${LLVM_VERSION}" != "2.9" ]; then
     cd googletest-release-1.7.0/
     cmake .
     make
+	exit 0
     # Normally I wouldn't do something like this but hey we're running on a temporary virtual machine, so who cares?
     if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
       sudo cp lib* /usr/lib/
diff --git a/include/klee/Constraints.h b/include/klee/Constraints.h
index 87069f8..6f0aa66 100644
--- a/include/klee/Constraints.h
+++ b/include/klee/Constraints.h
@@ -60,6 +60,11 @@ public:
   size_t size() const {
     return constraints.size();
   }
+  void dump() {
+	  for (size_t i = 0; i < size(); i++) {
+		  constraints[i]->dump();
+	  }
+  }
 
   bool operator==(const ConstraintManager &other) const {
     return constraints == other.constraints;
diff --git a/include/klee/klee.h b/include/klee/klee.h
index d098039..b3bcdd1 100644
--- a/include/klee/klee.h
+++ b/include/klee/klee.h
@@ -107,6 +107,8 @@ extern "C" {
      and may have peculiar semantics. */
 
   void klee_assume(uintptr_t condition);
+  void klee_pass(uintptr_t condition);
+  void klee_fail(uintptr_t condition);
   void klee_warning(const char *message);
   void klee_warning_once(const char *message);
   void klee_prefer_cex(void *object, uintptr_t condition);
diff --git a/lib/Core/Executor.cpp b/lib/Core/Executor.cpp
index c087b79..0b96be3 100644
--- a/lib/Core/Executor.cpp
+++ b/lib/Core/Executor.cpp
@@ -1539,6 +1539,7 @@ static inline const llvm::fltSemantics * fpWidthToSemantics(unsigned width) {
 }
 
 void Executor::executeInstruction(ExecutionState &state, KInstruction *ki) {
+  static int int_suffix = 1;
   Instruction *i = ki->inst;
   switch (i->getOpcode()) {
     // Control flow
@@ -1813,6 +1814,51 @@ void Executor::executeInstruction(ExecutionState &state, KInstruction *ki) {
     for (unsigned j=0; j<numArgs; ++j)
       arguments.push_back(eval(ki, j+1, state).value);
 
+	const char* calleeName = cs.getCalledFunction()->getName().data();
+
+	if (strncmp(calleeName, "klee_pass", 9) == 0) {
+		printf("->>Function<%s> $$", calleeName);
+		char filename[] = "kleeAssert00000.smt2";
+		sprintf(filename+10, "%05d", int_suffix++);
+		strcat(filename, ".smt2");
+		printf("\n---------------------------------------------------------------------\n");
+		printf("filename:%s \targuments_size=%d\n", filename, numArgs);
+
+		//std::ofstream ofile("failAssert.smt2");
+		std::ofstream ofile(filename);
+		std::string Str;
+		llvm::raw_string_ostream info(Str);
+		ExprSMTLIBPrinter printer;
+		printer.setOutput(info);
+
+		Query query(state.constraints, Expr::createIsZero(arguments[0]));
+		//Query query(state.constraints, arguments[0]);
+		printer.setQuery(query);
+		printer.generateOutput();
+		ofile << info.str();
+		ofile.close();
+	} else if (strncmp(calleeName, "klee_fail", 9) == 0) {
+		printf("->>Function<%s> $$", calleeName);
+		char filename[] = "kleeAssert00000.smt2";
+		sprintf(filename+10, "%05d", int_suffix++);
+		strcat(filename, ".smt2");
+		printf("\n---------------------------------------------------------------------\n");
+		printf("filename:%s \targuments_size=%d\n", filename, numArgs);
+
+		std::ofstream ofile(filename);
+		std::string Str;
+		llvm::raw_string_ostream info(Str);
+		ExprSMTLIBPrinter printer;
+		printer.setOutput(info);
+
+		//Query query(state.constraints, Expr::createIsZero(arguments[0]));
+		Query query(state.constraints, arguments[0]);
+		printer.setQuery(query);
+		printer.generateOutput();
+		ofile << info.str();
+		ofile.close();
+	}
+
     if (f) {
       const FunctionType *fType = 
         dyn_cast<FunctionType>(cast<PointerType>(f->getType())->getElementType());
diff --git a/lib/Core/SpecialFunctionHandler.cpp b/lib/Core/SpecialFunctionHandler.cpp
index 0ecbdd0..f0e50b2 100644
--- a/lib/Core/SpecialFunctionHandler.cpp
+++ b/lib/Core/SpecialFunctionHandler.cpp
@@ -91,6 +91,8 @@ static SpecialFunctionHandler::HandlerInfo handlerInfo[] = {
   add("calloc", handleCalloc, true),
   add("free", handleFree, false),
   add("klee_assume", handleAssume, false),
+  add("klee_pass", handlePass, true),
+  add("klee_fail", handleFail, true),
   add("klee_check_memory_access", handleCheckMemoryAccess, false),
   add("klee_get_valuef", handleGetValue, true),
   add("klee_get_valued", handleGetValue, true),
@@ -418,6 +420,21 @@ void SpecialFunctionHandler::handleAssume(ExecutionState &state,
   }
 }
 
+void SpecialFunctionHandler::handlePass(ExecutionState &state,
+                            KInstruction *target,
+                            std::vector<ref<Expr> > &arguments) {
+  assert(arguments.size()==1 && "invalid number of arguments to klee_pass");
+  //printf("in handleAssertion function...\n");
+  return;
+}
+
+void SpecialFunctionHandler::handleFail(ExecutionState &state,
+                            KInstruction *target,
+                            std::vector<ref<Expr> > &arguments) {
+  assert(arguments.size()==1 && "invalid number of arguments to klee_fail");
+  //printf("in handleAssertion function...\n");
+  return;
+}
 void SpecialFunctionHandler::handleIsSymbolic(ExecutionState &state,
                                 KInstruction *target,
                                 std::vector<ref<Expr> > &arguments) {
diff --git a/lib/Core/SpecialFunctionHandler.h b/lib/Core/SpecialFunctionHandler.h
index 2dfdde4..3bf8b41 100644
--- a/lib/Core/SpecialFunctionHandler.h
+++ b/lib/Core/SpecialFunctionHandler.h
@@ -101,6 +101,8 @@ namespace klee {
     HANDLER(handleAssert);
     HANDLER(handleAssertFail);
     HANDLER(handleAssume);
+    HANDLER(handlePass);
+    HANDLER(handleFail);
     HANDLER(handleCalloc);
     HANDLER(handleCheckMemoryAccess);
     HANDLER(handleDefineFixedObject);
diff --git a/runtime/Runtest/intrinsics.c b/runtime/Runtest/intrinsics.c
index 4d785ee..baf3794 100644
--- a/runtime/Runtest/intrinsics.c
+++ b/runtime/Runtest/intrinsics.c
@@ -148,6 +148,14 @@ void klee_assume(uintptr_t x) {
   }
 }
 
+void klee_pass(uintptr_t x) {
+	klee_assert(x);
+}
+
+void klee_fail(uintptr_t x) {
+	klee_assert(x);
+}
+
 #define KLEE_GET_VALUE_STUB(suffix, type)	\
 	type klee_get_value##suffix(type x) { \
 		return x; \
diff --git a/tools/klee/main.cpp b/tools/klee/main.cpp
index 3662cbe..78047a1 100644
--- a/tools/klee/main.cpp
+++ b/tools/klee/main.cpp
@@ -734,6 +734,8 @@ static const char *modelledExternals[] = {
   "abort",
   "klee_abort",
   "klee_assume",
+  "klee_pass",
+  "klee_fail",
   "klee_check_memory_access",
   "klee_define_fixed_object",
   "klee_get_errno",
