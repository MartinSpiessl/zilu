[ 20%] [34mCompiling cfg2init...[0m[32m[DONE][0m
[ 40%] [34mCompiling cfg2test...[0m[32m[DONE][0m
[ 60%] [34mCompiling cfg2verif...[0m[32m[DONE][0m
[ 80%] [34mCompiling smt2solver...[0m[32m[DONE][0m
[100%] [34mCompiling model_parse...[0m[32m[DONE][0m
[34mConverting the given config file to a valid cplusplus file...[0mLearners [[--> conjunctive]][32m[1m[DONE][0m
[34mGenerating CMakeLists file for further construction...[0m[32m[1m[DONE][0m
[34mBuild the project...[0m
Scanning dependencies of target multivar_true_1
[  8%] Building CXX object CMakeFiles/multivar_true_1.dir/test/multivar_true_1.cpp.o
[ 16%] Building CXX object CMakeFiles/multivar_true_1.dir/src/linear_learner.cpp.o
[ 25%] Building CXX object CMakeFiles/multivar_true_1.dir/src/svm_core.cpp.o
[ 33%] Building CXX object CMakeFiles/multivar_true_1.dir/src/color.cpp.o
[ 41%] Building CXX object CMakeFiles/multivar_true_1.dir/src/state.cpp.o
[ 50%] Building CXX object CMakeFiles/multivar_true_1.dir/src/polynomial.cpp.o
[ 58%] Building CXX object CMakeFiles/multivar_true_1.dir/src/iif.cpp.o
[ 66%] Building CXX object CMakeFiles/multivar_true_1.dir/src/config.cpp.o
[ 75%] Building CXX object CMakeFiles/multivar_true_1.dir/src/classifier.cpp.o
[ 83%] Building CXX object CMakeFiles/multivar_true_1.dir/src/poly_learner.cpp.o
[ 91%] Building CXX object CMakeFiles/multivar_true_1.dir/src/conjunctive_learner.cpp.o
[100%] Building CXX object CMakeFiles/multivar_true_1.dir/src/instrumentation.cpp.o
Linking CXX executable multivar_true_1
[100%] Built target multivar_true_1
[32mGEN INIT[0m
[34mGenerating a C file to get initial positive value by KLEE...[0m[32m[1m[Done][0m
[33mLOOKING FOR SMT for Z3
[33m  1)---->[1] :::::: 0	0	
[0m[34mRunning the project to generate invariant candidiate...[0m
[32m[1m--------------------------------------------- Iteration 1 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt[0m
[34m[1mTest Counter Example: (0,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r20,#s0] -->   [12+:216-]|-->> [33m(1.123032574228884 + 0.003574517151916979*x - 0.01475929662727011*y >= 0)  &&  (1 + 0.008292201382033564*x + 0.02685093780848964*y >= 0) 
[0m[31m[2Pure Random][0m[#r40,#s0] -->   [12+:339-]|-->> [33m(1.066041275797373 - 0.02213883677298311*x + 0.01613508442776735*y >= 0)  &&  (1.346274921301154 + 0.02728226652675761*x - 0.05876180482686254*y >= 0)  &&  (1 + 0.008292201382033564*x + 0.02685093780848964*y >= 0) 
[0m[31m[3Pure Random][0m[#r60,#s0] -->   [12+:478-]|-->> [33m(1.066041275797373 - 0.02213883677298311*x + 0.01613508442776735*y >= 0)  &&  (1.346274921301154 + 0.02728226652675761*x - 0.05876180482686254*y >= 0)  &&  (1 + 0.008292201382033564*x + 0.02685093780848964*y >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 3 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(529 - 11*x + 8*y >= 0)  &&  (296 + 6*x - 13*y >= 0)  &&  (37 + y >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.inv >>> [0m(529 - 11*x + 8*y >= 0)  &&  (296 + 6*x - 13*y >= 0)  &&  (37 + y >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 2 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt[0m
[34m[1mTest Counter Example: (177,177) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m+
[0m[34m[1mTest Counter Example: (178,178) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m+
[0m[34m[1mTest Counter Example: (179,179) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m+
[0m[34m[1mTest Counter Example: (180,180) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m+
[0m[34m[1mTest Counter Example: (181,181) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m+
[0m[34m[1mTest Counter Example: (182,182) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m+
[0m[34m[1mTest Counter Example: (183,183) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m+
[0m[34m[1mTest Counter Example: (184,184) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m+
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r20,#s0] -->   [56+:658-]|-->> [33m(1 + 0.01257550191946992*x - 0.01257906447201872*y >= 0)  &&  (1 + 0.08331351231158302*x - 0.08330902453307365*y >= 0)  &&  (1 - 0.399896570882742*x + 0.3999011072475369*y >= 0)  &&  (1 + 0.008292201382033564*x + 0.02685093780848963*y >= 0) 
[0m[31m[2Pure Random][0m[#r40,#s0] -->   [56+:865-]|-->> [33m(1 + 0.01257550191946992*x - 0.01257906447201872*y >= 0)  &&  (1 - 0.999556953930135*x + 0.999561497992385*y >= 0)  &&  (1 + 0.1666122227192295*x - 0.1666077170132347*y >= 0)  &&  (1 + 0.008292201382033564*x + 0.02685093780848963*y >= 0) 
[0m[31m[3Pure Random][0m[#r60,#s0] -->   [56+:1043-]|-->> [33m(1 + 0.01257550191946992*x - 0.01257906447201872*y >= 0)  &&  (1 - 0.999556953930135*x + 0.999561497992385*y >= 0)  &&  (1 + 0.1666122227192295*x - 0.1666077170132347*y >= 0)  &&  (1 + 0.008292201382033564*x + 0.02685093780848963*y >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 3 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(6 + x - y >= 0)  &&  (1 - x + y >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.inv >>> [0m(6 + x - y >= 0)  &&  (1 - x + y >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [31m[1m [sat] [FAIL][0m >>> counter example(s) are  stored at [33m/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt[0m
[31m>>>NOT A VALID INVARIVANT...Reason: [1mProperty I (precondition ==> invariant) FAILS. 
[0m
[32m[1m--------------------------------------------- Iteration 3 --------------------------------------------------------[0m[0m
[31m>>>> run counter example from file %%/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt[0m
[34m[1mTest Counter Example: (-1,0) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-2,-3) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-3,-4) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-6,-5) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-7,-8) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-8,-2) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (0,-1) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m-
[0m[34m[1mTest Counter Example: (-9,-10) @/home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.cnt --> [0m-
[0m[33m>>>> Conjunctive Learner-----------------------
[0m[31m[1Pure Random][0m[#r20,#s0] -->   [56+:1228-]|-->> [33m(1 + 0.01257550191946992*x - 0.01257906447201872*y >= 0)  &&  (1 - 1.99906916620261*x + 1.999073397265326*y >= 0)  &&  (1 + 2*y >= 0)  &&  (1 + 1.999073397265326*x - 1.99906916620261*y >= 0)  &&  (1 + 2*x >= 0) 
[0m[31m[2Pure Random][0m[#r40,#s0] -->   [56+:1411-]|-->> [33m(1 + 0.01257550191946992*x - 0.01257906447201872*y >= 0)  &&  (1 - 1.99906916620261*x + 1.999073397265326*y >= 0)  &&  (1 + 2*y >= 0)  &&  (1 + 1.999073397265326*x - 1.99906916620261*y >= 0)  &&  (1 + 2*x >= 0) 
[0m---------------------------------------------------
Finish running svm_i for 2 times.
[33m  Hypothesis Invairant(Conjunctive): { [32m(1 + 2*x - 2*y >= 0)  &&  (1 - 2*x + 2*y >= 0) [33m }[0m
save the training dataset to file /home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.ds
[34mInvariant file is located at /home/lijiaying/Research/GitHub/ZILU/tmp/multivar_true_1.inv >>> [0m(1 + 2*x - 2*y >= 0)  &&  (1 - 2*x + 2*y >= 0) 
[34mGenerating a new config file contains the invariant candidate...[0m[32m[1m[Done][0m
[34mGenerating three C files to do the verification by KLEE...[0m[32m[1m[Done][0m
[32mCompiling the C files and Run KLEE...1[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...2[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[32mCompiling the C files and Run KLEE...3[0m
[34mRunning KLEE to generate path condition[0m
  |-- processing kleeAssert00001.smt2 ---> [32m[1m [unsat] [PASS][0m
[1m[32m-----------------------------------------------------------finish proving---------------------------------------------------------------[0m
[32mThe invariant can be [33m(1 + 2*x - 2*y >= 0)  &&  (1 - 2*x + 2*y >= 0) [0m

=====================time=========================
